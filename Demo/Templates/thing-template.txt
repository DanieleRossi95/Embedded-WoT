{% macro updateTD() -%}
{%- for item in td['forms'] if 'href' in item %}
    {%- do item.update(href='" + urlServer + "/all/properties') -%}
{%- endfor %}    
{#- EndPoint Properties #}
{%- for property in template['properties'] %}
    {%- set i = loop.index -%}
    {%- for item in td['properties'][property['name']]['forms'] if 'href' in item -%}
        {%- do item.update(href='" + urlServer + "/properties/" + property' + i | string + '_name + "' ) -%}
    {%- endfor -%}
{%- endfor %}
{#- EndPoint Actions #}    
{%- for action in template['actions'] %}
    {%- set i = loop.index -%}
    {%- for item in td['actions'][action['name']]['forms'] if 'href' in item -%}
        {%- do item.update(href='" + urlServer + "/actions/" + action' + i | string + '_name + "' ) -%}
    {%- endfor -%}
{%- endfor %}     
{#- EndPoint Events #}    
{%- for event in template['events'] %}
    {%- set i = loop.index -%}
    {%- for item in td['events'][event['name']]['forms'] if 'href' in item -%}
        {%- do item.update(href='" + urlSocket + "/events/" + event' + i | string + '_name + "' ) -%}
    {%- endfor -%}
{%- endfor %}   
{%- endmacro %}
{%- macro updateGlobal() -%}
{%- do global.update({'isPropertyString':False}) -%}
{%- do global.update({'isPropertyBoolean':False}) -%}
{%- do global.update({'isPropertyInteger':False}) -%}
{%- do global.update({'isPropertyArray':False}) -%}
{%- do global.update({'isString':False}) -%}
{%- do global.update({'isBoolean':False}) -%}
{%- do global.update({'isInteger':False}) -%}
{%- do global.update({'isNumber':False}) -%}
{%- do global.update({'isMin':False}) -%}
{%- do global.update({'isMax':False}) -%}
{%- do global.update({'isArray':False}) -%}
{%- do global.update({'isMinItems':False}) -%}
{%- do global.update({'isMaxItems':False}) -%}
{%- do global.update({'isArrayObject':False}) -%}
{%- do global.update({'isArrayString':False}) -%}
{%- do global.update({'isArrayBoolean':False}) -%}
{%- do global.update({'isArrayMin':False}) -%}
{%- do global.update({'isArrayMax':False}) -%}
{%- do global.update({'isObject':False}) -%}
{%- do global.update({'isProperty':False}) -%}
{%- do global.update({'isRequired':False}) -%}
{%- do global.update({'isSubscription':False}) -%}
{%- do global.update({'isCancellation':False}) -%}
{%- for property in template['properties'] -%}
{%- if property['type'] == 'object' -%}
{%- if 'properties' in property -%}
{%- for p in property['properties'] -%}
{%- if (p['type'] == 'string' or p['type'] == 'null') and (not(global['isPropertyString'])) -%}
{%- do global.update({'isPropertyString':True}) -%}
{%- endif -%}
{%- if p['type'] == 'booelan' and not(global['isPropertyBoolean']) -%}
{%- do global.update({'isPropertyBoolean':True}) -%}
{%- endif -%}
{% if (p['type'] == 'integer' or p['type'] == 'number') and not(global['isPropertyInteger']) -%}
{%- do global.update({'isPropertyInteger':True}) -%}
{%- endif -%}
{%- if p['type'] == 'array' and not(global['isPropertyArray']) -%}
{%- do global.update({'isPropertyArray':True}) -%}
{%- endif -%}
{%- endfor -%}
{%- endif -%}
{%- endif -%}
{%- endfor -%}
{%- for action in template['actions'] -%}
{%- for item in action['input'] -%}
{%- if (item['type'] == 'string' or item['type'] == 'null') and (not(global['isString'])) -%}
{%- do global.update({'isString':True}) -%}
{%- elif item['type'] == 'boolean' and not(global['isBoolean']) -%}
{%- do global.update({'isBoolean':True}) -%}
{%- elif item['type'] == 'integer' or item['type'] == 'number' -%}
{%- if not(global['isInteger']) -%}
{%- do global.update({'isInteger':True}) -%}
{%- endif -%}
{%- if 'minimum' in item and not(global['isMin']) -%}
{%- do global.update({'isMin':True}) -%}
{% endif -%}
{%- if 'maximum' in item and not(global['isMax']) -%}
{%- do global.update({'isMax':True}) -%}
{%- endif -%}
{%- elif item['type'] == 'array' -%}
{%- if not(global['isArray']) -%}
{%- do global.update({'isArray':True}) -%}
{%- endif -%}
{%- if 'minItems' in item and not(global['isMinItems']) -%}
{%- do global.update({'isMinItems':True}) -%}
{%- endif -%}
{%- if 'maxItems' in item and not(global['isMaxItems']) -%}
{%- do global.update({'isMaxItems':True}) -%}
{%- endif -%}
{%- if item['items']['type'] == 'object' and not(global['isArrayObject']) -%}
{%- do global.update({'isArrayObject':True}) -%}
{%- elif (item['items']['type'] == 'string' or item['items']['type'] == 'null') and (not(global['isArrayString'])) -%}
{%- do global.update({'isArrayString':True}) -%}
{%- elif item['items']['type'] == 'boolean' and not(global['isArrayBoolean']) -%}
{%- do global.update({'isArrayBoolean':True}) -%}
{%- elif item['items']['type'] == 'integer' or item['items']['type'] == 'number' -%}
{%- if not(global['isArrayInteger']) -%}
{%- do global.update({'isArrayInteger':True}) -%}
{%- endif -%}
{%- if 'minimum' in item['items'] and not(global['isArrayMin']) -%}
{%- do global.update({'isArrayMin':True}) -%}
{%- endif -%}
{%- if 'maximum' in item['items'] and not(global['isArrayMax']) -%}
{%- do global.update({'isArrayMax':True}) -%}
{%- endif -%}
{%- endif -%}
{%- elif item['type'] == 'object' -%}
{%- if not(global['isObject']) -%}
{%- do global.update({'isObject':True}) -%}
{%- endif -%}
{%- if 'properties' in item -%}
{%- if not(global['isProperty']) -%}
{%- do global.update({'isProperty':True}) -%}
{%- endif -%}
{%- for p in item['properties'] -%}
{%- if (p['type'] == 'string' or p['type'] == 'null') and (not(global['isString'])) -%}
{%- do global.update({'isString':True}) -%}
{%- elif p['type'] == 'boolean' and not(global['isBoolean']) -%}
{%- do global.update({'isBoolean':True}) -%}
{%- elif p['type'] == 'integer' or p['type'] == 'number' -%}
{%- if not(global['isInteger']) -%}
{%- do global.update({'isInteger':True}) -%}
{%- endif -%}
{%- if 'minimum' in p and not(global['isMin']) -%}
{%- do global.update({'isMin':True}) -%}
{%- endif -%}
{%- if 'maximum' in p and not(global['isMax']) -%}
{%- do global.update({'isMax':True}) -%}
{%- endif -%}
{%- elif p['type'] == 'array' -%}
{%- do global.update({'isArray':True}) -%}
{%- if 'minItems' in p['items'] and not(global['isMinItems']) -%}
{%- do global.update({'isMinItems':True}) -%}
{%- endif -%}
{%- if 'maxItems' in p['items'] and not(global['isMaxItems']) -%}
{%- do global.update({'isMaxItems':True}) -%}
{%- endif -%}
{%- if (p['items']['type'] == 'string' or p['items']['type'] == 'null') and (not(global['isArrayString'])) -%}
{%- do global.update({'isArrayString':True}) -%}
{%- elif p['items']['type'] == 'boolean' and not(global['isArrayBoolean']) -%}
{%- do global.update({'isArrayBoolean':True}) -%}
{%- elif p['items']['type'] == 'integer' or p['items']['type'] == 'number' -%}
{%- if not(global['isArrayInteger']) -%}
{%- do global.update({'isArrayInteger':True}) -%}
{%- endif -%}
{%- if 'minimum' in p['items'] and not(global['isArrayMin']) -%}
{%- do global.update({'isArrayMin':True}) -%}
{%- endif -%}
{%- if 'maximum' in p['items'] and not(global['isArrayMax']) -%}
{%- do global.update({'isArrayMax':True}) -%}
{%- endif -%}
{%- endif -%}
{%- endif -%}
{%- endfor -%}
{%- if 'required' in item and not(global['isRequired']) -%}
{%- do global.update({'isRequired':True}) -%}
{%- endif -%}
{%- endif -%}
{%- endif -%}
{%- endfor -%}
{%- endfor -%}
{%- for event in template['events'] -%}
{%- set dataType = ['subscription', 'cancellation'] -%}
{%- for data in dataType -%}
{%- if data in event -%}
{% if data == dataType[0] and not(global['isSubscription']) %}
{%- do global.update({'isSubscription':True}) -%}
{% elif data == dataType[1] and not(global['isCancellation']) %}
{%- do global.update({'isCancellation':True}) -%}
{%- endif -%}
{%- for item in event[data] -%}
{%- if (item['type'] == 'string' or item['type'] == 'null') and not(global['isString']) -%}
{%- do global.update({'isString':True}) -%}
{%- elif item['type'] == 'boolean' and not(global['isBoolean']) -%}
{%- do global.update({'isBoolean':True}) -%}
{%- elif item['type'] == 'integer' or item['type'] == 'number' -%}
{%- if not(global['isInteger']) -%}
{%- do global.update({'isInteger':True}) -%}
{%- endif -%}
{%- if 'minimum' in item and not(global['isMin']) -%}
{%- do global.update({'isMin':True}) -%}
{%- endif -%}
{%- if 'maximum' in item and not(global['isMax']) -%}
{%- do global.update({'isMax':True}) -%}
{%- endif -%}
{%- elif item['type'] == 'array' -%}
{%- if not(global['isArray']) -%}
{%- do global.update({'isString':Array}) -%}
{%- endif -%}
{%- if 'minItems' in item and not(global['isMinItems']) -%}
{%- do global.update({'isMinItems':True}) -%}
{%- endif -%}
{%- if 'maxItems' in item and not(global['isMaxItems']) -%}
{%- do global.update({'isMaxItems':True}) -%}
{%- endif -%}
{%- if item['items']['type'] == 'object' and not(global['isArrayObject']) -%}
{%- do global.update({'isArrayObject':True}) -%}
{%- elif (item['items']['type'] == 'string' or item['items']['type'] == 'null') and (not(global['isArrayString'])) -%}
{%- do global.update({'isArrayString':True}) -%}
{%- elif item['items']['type'] == 'boolean' and not(global['isArrayBoolean']) -%}
{%- do global.update({'isArrayBoolean':True}) -%}
{%- elif item['items']['type'] == 'integer' or item['items']['type'] == 'number' -%}
{%- if not(global['isArrayInteger']) -%}
{%- do global.update({'isArrayInteger':True}) -%}
{%- endif -%}
{%- if 'minimum' in item['items'] and not(global['isArrayMin']) -%}
{%- do global.update({'isArrayMin':True}) -%}
{%- endif -%}
{%- if 'maximum' in item['items'] and not(global['isArrayMax']) -%}
{%- do global.update({'isArrayMax':True}) -%}
{%- endif -%}
{%- endif -%}
{%- elif item['type'] == 'object' -%}
{%- if not(global['isObject']) -%}
{%- do global.update({'isObject':True}) -%}
{%- endif -%}
{%- if 'properties' in item -%}
{%- if not(global['isProperty']) -%}
{%- do global.update({'isProperty':True}) -%}
{%- endif -%}
{%- for p in item['properties'] -%}
{%- if (p['type'] == 'string' or p['type'] == 'null') and (not(global['isString'])) -%}
{%- do global.update({'isString':True}) -%}
{%- elif p['type'] == 'boolean' and not(global['isBoolean']) -%}
{%- do global.update({'isBoolean':True}) -%}
{%- elif p['type'] == 'integer' or p['type'] == 'number' -%}
{%- if not(global['isInteger']) -%}
{%- do global.update({'isInteger':True}) -%}
{%- endif -%}
{%- if 'minimum' in p and not(global['isMin']) -%}
{%- do global.update({'isMin':True}) -%}
{%- endif -%}
{%- if 'maximum' in p and not(global['isMax']) -%}
{%- do global.update({'isMax':True}) -%}
{%- endif -%}
{%- elif p['type'] == 'array' -%}
{%- do global.update({'isArray':True}) -%}
{%- if 'minItems' in p['items'] and not(global['isMinItems']) -%}
{%- do global.update({'isMinItems':True}) -%}
{%- endif -%}
{%- if 'maxItems' in p['items'] and not(global['isMaxItems']) -%}
{%- do global.update({'isMaxItems':True}) -%}
{%- endif -%}
{%- if (p['items']['type'] == 'string' or p['items']['type'] == 'null') and (not(global['isArrayString'])) -%}
{%- do global.update({'isArrayString':True}) -%}
{%- elif p['items']['type'] == 'boolean' and not(global['isArrayBoolean']) -%}
{%- do global.update({'isArrayBoolean':True}) -%}
{%- elif p['items']['type'] == 'integer' or p['items']['type'] == 'number' -%}
{%- if not(global['isArrayInteger']) -%}
{%- do global.update({'isArrayInteger':True}) -%}
{%- endif -%}
{%- if 'minimum' in p['items'] and not(global['isArrayMin']) -%}
{%- do global.update({'isArrayMin':True}) -%}
{%- endif -%}
{%- if 'maximum' in p['items'] and not(global['isArrayMax']) -%}
{%- do global.update({'isArrayMax':True}) -%}
{%- endif -%}
{%- endif -%}
{%- endif -%}
{%- endfor -%}
{%- if 'required' in item and not(global['isRequired']) -%}
{%- do global.update({'isRequired':True}) -%}
{%- endif -%}
{%- endif -%}
{%- endif -%}
{%- endfor -%}
{%- endif -%}
{%- endfor -%}
{%- endfor -%}
{%- endmacro -%}
{% macro defineVariable(typeV, name, value) -%}
{%- if value is iterable and value is not string %}
{{ typeV }} {{ name }} = 
    {%- for elem in value -%}
        {%- if loop.last -%} 
            {{ ' ' + elem }};
        {%- else -%}
            {{ ' ' + elem }}
        {%- endif -%}
    {%- endfor -%}    
{%- elif typeV == 'const char*' %}
{%- if value == 'iv' -%}
{{ typeV }} {{ name }} = "";
{%- else -%}
{{ typeV }} {{ name }} = "{{ value }}";
{%- endif -%}
{%- elif typeV.lower() == 'string' or typeV == 'null' %}
{%- if value == 'iv' -%}
{{ castType(typeV) }} {{ name }} = "";
{%- else -%}
{{ castType(typeV) }} {{ name }} = "{{ value }}";
{%- endif -%}
{%- elif typeV == 'string_nq' -%}
String {{ name }} = {{ value }};
{%- elif typeV == 'char_nq' -%}
const char* {{ name }} = {{ value }};
{%- elif typeV == 'integer' %}
{%- if value == '' -%}
int {{ name }};
{%- elif value == 'iv' -%}
int {{ name }} = 0;    
{%- else -%}    
int {{ name }} = {{ value }};
{%- endif -%}
{%- elif typeV == 'number' %}
{%- if value == '' -%}
double {{ name }};
{%- elif value == 'iv' -%}
double {{ name }} = 0.0;
{%- elif '.' in value -%}    
double {{ name }} = {{ value }};
{%- else -%}
double {{ name }} = {{ value }}.0;
{%- endif -%}
{% elif typeV == 'boolean' %}
{%- if value == '' -%}
bool {{ name }};
{%- elif value == 'iv' -%}
bool {{ name }} = false;    
{%- else -%}    
bool {{ name }} = {{ value }};
{%- endif -%}
{% elif typeV == 'array' or typeV == 'JsonArray' %}
{%- if value == 'iv' -%}
JsonArray {{ name }};
{%- else -%}
JsonArray {{ name }} = {{ value }};
{%- endif -%}
{% elif typeV == 'object' or typeV == 'JsonObject' %}
{%- if value == 'iv' -%}
JsonObject {{ name }};
{%- else -%}
JsonObject {{ name }} = {{ value }};
{%- endif -%}
{% else %}
{{ typeV }} {{ name }} = {{ value }};    
{%- endif %}    
{%- endmacro %}
{% macro setVariable(ifString, name, value='') -%}
{%- if ifString -%}
{{ name }} = "{{ value }}";
{%- elif value == '' -%}
{{ name }};
{%- else -%}
{{ name }} = {{ value }};
{%- endif -%}
{%- endmacro %}
{% macro defineFunction(name, input, output, body, cast) -%}
{%- if 'type' in output -%}
{%- if cast -%}
{{ castType(output['type']) }}
{%- else -%}
{{ output['type'] }}
{%- endif -%}
{%- else -%}      
void       
{%- endif -%}        
{{ ' ' + name }}(
    {%- for item in input -%}
        {%- if cast -%}
        {{ castType(item['type']) }}
        {%- else -%}
        {{ item['type'] }}
        {%- endif -%}
        {%- if loop.last -%}      
        {{ ' ' + item['name'] }}
        {%- else -%} 
        {{ ' ' + item['name'] }},
        {%- endif -%}
    {%- endfor -%}
) {
    {{ body }}
    {% if 'name' in output %}
    return {{ output['name'] }};
    {% endif %}
}    
{%- endmacro %}
{% macro castType(type) -%}
{%- if type == 'integer' -%}
int
{%- elif type == 'number' -%}
double
{%- elif type.lower() == 'string' or type == 'null' -%}
String
{%- elif type == 'boolean' -%}
bool
{%- elif type == 'array' -%}
JsonArray
{%- elif type == 'object' -%}
JsonObject 
{%- endif -%}
{%- endmacro %}
{% macro handleType(interaction, interactionName, array=False) -%}
{% if interaction['type'] == 'array' %}
{{ defineVariable('JsonArray', interactionName + '_value', 'iv') }}
{% if 'minItems' in property %}
{{ defineVariable('int', interactionName + '_minItems', interaction['minItems']) }}
{% endif %}
{% if 'maxItems' in interaction %}
{{ defineVariable('int', interactionName + '_minItems', interaction['maxItems']) }}
{% endif %}
{{ handleType(interaction['items'], interactionName, True) }}
{% elif interaction['type'] == 'object' %}
{{ defineVariable('JsonObject', interactionName + '_value', 'iv') }}
{% if 'properties' in interaction %}
{{ defineVariable('String', interactionName + '_schema', interaction['properties'] | replace("'", '\\"') | replace(': ', ':') | replace(', ', ',')) }}
{% endif %}
{% if 'required' in interaction %}
String {{ interactionName }}_opRequired[{{ interaction['required'] | length }}] = {
    {%- for p in interaction['required'] -%}
    {%- if loop.last -%}
    "{{ p }}"
    {%- else -%}
    "{{ p }}",
    {%- endif -%}
    {%- endfor -%}
};
{%- endif -%}
{% elif interaction['type'] == 'integer' or interaction['type'] == 'number' %}
{{ defineVariable(interaction['type'], interactionName + '_value', 'iv') }}
{% if array %}
{% if 'minimum' in interaction %}
{{ defineVariable(interaction['type'], interactionName + '_itemsMinimum', interaction['minimum']) }}
{% endif %}
{% if 'maximum' in interaction %}
{{ defineVariable(interaction['type'], interactionName + '_itemsMaximum', interaction['maximum']) }}
{% endif %}
{% else %}
{% if 'minimum' in interaction %}
{{ defineVariable(interaction['type'], interactionName + '_minimum', interaction['minimum']) }}
{% endif %}
{% if 'maximum' in interaction %}
{{ defineVariable(interaction['type'], interactionName + '_maximum', interaction['maximum']) }}
{%- endif %}
{% endif %}
{% else %}
{{ defineVariable(interaction['type'], interactionName + '_value', 'iv') }}
{% endif %}
{% endmacro -%}
{{ updateTD() }}
{%- set global = {} -%}
{{ updateGlobal() }}
{%- set ssid = template['ssid'] -%}
{%- set password = template['password'] -%}
{%- set protocolServer = 'http' -%}
{%- set protocolSocket = 'ws' -%}
{%- set portServer = template['portserver'] -%}
{%- set portSocket = template['portsocket'] -%}
{%- set ipServer = '192.168.1.5' -%}
{%- set thingName = td['title'].lower() %}
{%- set urlServer = protocolServer + "://" + ipServer + ":" + portServer + "/" + thingName -%}
{%- set thingD = td | replace("'", '\\"') | replace('True', 'true') | replace('False', 'false') | replace(': ', ':') | replace(', ', ',') | replace(' + ', '+') -%}
{%- set req = [] -%}
{%- set dataType = ['subscription', 'cancellation'] -%}
#include <ESP8266WebServer.h>
#include <WebSocketsServer.h>
#include <ArduinoJson.h>
{% if template['libraries'] | length > 0 %}
{% for lib in template['libraries'] %}
#include <{{ lib }}>
{% endfor %}
{% endif %}

{{ defineVariable('const char*', 'ssid', ssid) }}
{{ defineVariable('const char*', 'password', password) }}
{{ defineVariable('String', 'protocolServer', protocolServer) }}
{{ defineVariable('int', 'portServer', portServer) }}
{{ defineVariable('String', 'urlServer', '') }}
{% if template['numevents'] != 0 %}
{{ defineVariable('String', 'protocolSocket', protocolSocket) }}
{{ defineVariable('int', 'portSocket', portSocket) }}
{{ defineVariable('String', 'urlSocket', '') }}
{% endif %}

{{ defineVariable('String', 'thingName', thingName) }}
{{ defineVariable('String', 'td', '') }}

DynamicJsonDocument p_doc(1024);
{% if template['numevents'] > 0 %}
DynamicJsonDocument e_doc(1024);
DynamicJsonDocument es_doc(1024);
{% endif %}
DeserializationError err;

{{ defineVariable('int', 'properties_number', template['numproperties']) }}
{{ defineVariable('int', 'objectProperties_number', template['numop']) }}
{{ defineVariable('int', 'actions_number', template['numactions']) }}
{{ defineVariable('int', 'events_number', template['numevents']) }}

{% if template['numproperties'] > 0 %}
// Properties
{% for property in template['properties'] %}
{{ defineVariable('const char*', 'property' + loop.index | string + '_name', property['name']) }}
{{ handleType(property, 'property' + loop.index | string) }}
{% endfor %}
{% endif %}

{% if template['numactions'] > 0 %}
// Actions
{% for action in template['actions'] %}
{% set actionIndex = 'action' + loop.index | string -%}
{{ defineVariable('const char*', actionIndex + '_name', action['name']) }}
{{ defineVariable('int', actionIndex + '_inputsNumber', action['input'] | length) }}
String {{ actionIndex + '_schema' }}[{{ action['input'] | length }}] = {
    {%- for item in action['input'] -%}
    {%- if loop.last -%}
    "{{ item | replace("'", '\\"') | replace(': ', ':') | replace(', ', ',') }}"
    {%- else -%}
    "{{ item | replace("'", '\\"') | replace(': ', ':') | replace(', ', ',') }}",
    {%- endif -%}
    {%- endfor -%}
};
{% if 'name' in action['output']  %}
{{ defineVariable('String', actionIndex + '_output', action['output'] | string ) }}
{% endif %}
{% endfor %}
{% endif %}

{% if template['numevents'] > 0 %}
// Events
{% for event in template['events'] %}
{% set eventIndex = 'event' + loop.index | string -%}
{{ defineVariable('const char*', eventIndex + '_name', event['name']) }}
{% set dataType = ['subscription', 'data', 'cancellation'] %}
{% for data in dataType %}
{% if data in event %}
String {{ eventIndex + '_' + data + 'Schema' }}[{{ event[data] | length }}] = {
    {%- for item in event[data] -%}
    {%- if loop.last -%}
    "{{ item | replace("'", '\\"') | replace(': ', ':') | replace(', ', ',') }}"
    {%- else -%}
    "{{ item | replace("'", '\\"') | replace(': ', ':') | replace(', ', ',') }}",
    {%- endif -%}
    {%- endfor -%}
};
{% endif %}
{% endfor %}
{% endfor %}
String events_list[{{ template['numevents'] }}] = {
    {%- for i in range(1, template['numevents']+1) -%}
    {%- if i == loop.last -%}
    {{ 'event' + i | string + '_name' }}
    {%- else -%}
    {{ 'event' + i | string + '_name' }},
    {%- endif -%}
    {%- endfor -%}
};
String events_endpoint[{{ template['numevents'] }}] = {
    {%- for i in range(1, template['numevents']+1) -%}
    {%- if i == loop.last -%}
    {{ 'thingName + "/events/" + event' + i | string + '_name' }}
    {%- else -%}
    {{ 'thingName + "/events/" + event' + i | string + '_name' }},
    {%- endif -%}
    {%- endfor -%}
};
{% endif %}

// Requests
{{ defineVariable('String', 'req1', '/') }}
{% do req.append(('req1', 'HTTP_GET')) %}
{{ defineVariable('String', 'req2', ['"/"', '+', 'thingName']) }}
{% do req.append(('req2', 'HTTP_GET')) %}
{{ defineVariable('String', 'req3', ['"/"', '+', 'thingName', '+', '"/all/properties"' ]) }}
{% do req.append(('req3', 'HTTP_GET')) %}
{% for i in range(1, template['numproperties']+1) %}
{% set request = 'req' + (i + 3) | string %}
{{ defineVariable('String', request, ['"/"', '+', 'thingName', '+', '"/properties/"', '+', 'property' + i | string + '_name']) }}
{% do req.append((request, 'HTTP_GET')) %}
{% endfor %}
{% for i in range(1, template['numactions']+1) %}
{% set request = 'req' + (i + 3 + template['numproperties']) | string %}
{{ defineVariable('String', request, ['"/"', '+', 'thingName', '+', '"/actions/"', '+', 'action' + i | string + '_name']) }}
{% do req.append((request, 'HTTP_POST')) %}
{% endfor %}

ESP8266WebServer server(portServer);
{% if template['numevents'] != 0 %}
WebSocketsServer webSocket = WebSocketsServer(portSocket);
{% endif %}

IPAddress ipS;

String header;

int i, j;

void setup() {
    {% if template['numop'] > 0 %}
    // properties data 
    {% for property in template['properties'] %}
    {% if property['type'] == 'object' %}
    DynamicJsonDocument op{{ loop.index }}_doc(1024);
    JsonArray arr{{ loop.index }};
    {% endif %}
    {% endfor %}

    {% for property in template['properties'] %}
    {% if property['type'] == 'object' %}
    {{ setVariable(False, 'deserializeJson(op' + loop.index | string + '_doc, property' + loop.index | string + '_schema)') }}
    {{ setVariable(False, 'arr' + loop.index | string, 'op' + loop.index | string + '_doc.as<JsonArray>()') }}
    {{ setVariable(False, 'property' + loop.index | string + '_value', 'p_doc.createNestedObject()') }}
    {% if 'properties' in property %}
    for(i=0; i<arr{{ loop.index }}.size(); i++) {
        {{ defineVariable('char_nq', 'op' + loop.index | string + '_name', 'arr' + loop.index | string + '[i]["name"]') }}
        {{ defineVariable('string_nq', 'op' + loop.index | string + '_type', 'arr' + loop.index | string + '[i]["type"]') }}
        {% if global['isPropertyString'] %}
                if(op{{ loop.index }}_type.equals("string") || op{{ loop.index }}_type.equals("null"))
            {{ setVariable(True, 'property' + loop.index | string + '_value[op' + loop.index | string + '_name]', '') }}
        {% endif -%}
        {% if global['isPropertyBooelan'] %}
        {% if global['isPropertyString'] %}{{ '\t\t\t\telse if' }}{% else %}{{ '\t\t\t\tif' }}{% endif %}(op{{ loop.index }}_type.equals("booelan"))
            {{ setVariable(False, 'property' + loop.index | string + '_value[op' + loop.index | string + '_name]', 'false') }}
        {% endif -%}
        {% if global['isPropertyInteger'] %}
        {% if global['isPropertyString'] or global['isPropertyBooelan'] %}{{ '\t\t\t\telse if' }}{% else %}{{ '\t\t\t\tif' }}{% endif %}(op{{ loop.index }}_type.equals("integer") || op{{ loop.index }}_type.equals("number"))
            {{ setVariable(False, 'property' + loop.index | string + '_value[op' + loop.index | string + '_name]', '0') }}
        {% endif -%}   
        {% if global['isPropertyArray'] %}
        {% if global['isPropertyString'] or global['isPropertyBooelan'] or global['isPropertyInteger'] %}{{ '\t\t\t\telse if' }}{% else %}{{ '\t\t\t\tif' }}{% endif %}(op{{ loop.index }}_type.equals("array"))
            {{ setVariable(False, 'property' + loop.index | string + '_value[op' + loop.index | string + '_name]', 'p_doc.createNestedArray()') }}
        {% endif -%}   
    {{ '\t\t}' }}
    {% endif %}
    {% endif %}
    {% endfor %}
    {% endif %}
    {% if global['isSubscription'] or global['isCancellation'] %}
    {{ defineVariable('int', 'schema_size', '0') }}
    JsonArray arr;

    {% for event in template['events'] %}
    {% set e = loop.index %}
    {% for data in dataType %}
    {% if data in event %}
    {{ setVariable(False, 'arr', 'es_doc.createNestedArray("event' + e | string + '_' + data + '")') }}
    {{ setVariable(False, 'schema_size', 'sizeof(event' + e | string + '_' + data + 'Schema) / sizeof(String)') }}
    for(i=0; i<schema_size; i++)
        {{ setVariable(False, 'arr.add(event' + e | string + '_' + data + 'Schema[i])') }}
    {% endif %}
    {% endfor %}
    {% endfor %}
    {% endif %}

    Serial.begin(115200);
    Serial.println();
  
    connection(ssid, password);
    
    td = "{{ thingD }}";

    // Server requests
    {% for r in req %}
    server.on({{ r[0] }},{{ r[1] }},{{ 'handleReq' + loop.index | string }});
    {% endfor %}

    server.begin();
    
    {%- if template['numevents'] != 0 -%}
    webSocket.begin();
    webSocket.onEvent(webSocketEvent);
    {% endif %}

    Serial.println("Server started");
    Serial.println(urlServer);
    {% if 'setup' in template %}

    {{ template['setup'] }}
    {% endif %}
}    

void loop() {
    // handle Requests
    {% if template['numevents'] != 0 %}
    webSocket.loop();
    {% endif %}
    server.handleClient();
    {% if 'loop' in template %}

    {{ template['loop'] }}
    {% endif %}
}

void connection(const char* ssid, const char* password) {
    WiFi.begin(ssid, password);
    
    Serial.print("\nConnecting to ");
    Serial.print(ssid);

    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.print(".");
    }

    Serial.println("\nConnected");
    Serial.print("IP address: ");
    ipS = WiFi.localIP();
    Serial.println(ipS);

    urlServer = protocolServer + "://" + ipS.toString() + ":" + portServer + "/" + thingName;
    {% if template['numevents'] != 0 %}
    urlSocket = protocolSocket + "://" + ipS.toString() + ":" + portSocket + "/" + thingName;
    {% endif %}
}

{% if template['numactions'] > 0 %}
// Action functions
{% for action in template['actions'] %}
{{ defineFunction(action['name'], action['input'], action['output'], action['body'], True) }}
{% endfor %}

// handle Types
{% if global['isArray'] -%}
bool handleType(String value, String schema, bool array) {
{% else %}
bool handleType(String value, String schema) {   
{% endif -%}     
    {{ '\t\t' }}DynamicJsonDocument schema_doc(1024);
    DynamicJsonDocument value_doc(1024);
    {% if global['isArray'] %}
    {{ defineVariable('JsonArray', 'array_value', 'iv') }}
    {% endif %}
    {% if global['isObject'] %}
    {{ defineVariable('JsonObject', 'obj_value', 'iv') }}
    {{ defineVariable('String', 'p', '') }}
    {% endif %}
    {{ defineVariable('bool', 'validInput', 'true') }}

    {{ setVariable(False, 'deserializeJson(schema_doc, schema)') }}
    {{ defineVariable('JsonObject', 'obj_schema', 'schema_doc.as<JsonObject>()') }}
    {{ defineVariable('string_nq', 'type', 'obj_schema["type"]') }}
    
    if(value[0] == '"')
        {{ setVariable(False, 'value.remove(0)') }}
    if(value[value.length()-1] == '"')    
        {{ setVariable(False, 'value.remove(value.length()-1)') }}
    
    {% if global['isString'] or global['isArrayString'] %}
    if(type.equals("string")) {
        {% if global['isArrayString'] %}
        if(array) {
            {{ setVariable(False, 'deserializeJson(value_doc, value)') }}
            {{ setVariable(False, 'array_value', 'value_doc.as<JsonArray>()') }}
            for(i=0; i<array_value.size(); i++) {
                {{ defineVariable('string_nq', 'ae', 'array_value[i]') }}
                if(ae.equalsIgnoreCase("null")) {
                    {{ setVariable(False, 'validInput', 'false') }}
                    break;
                }
            }   
        }
        else if(value.equalsIgnoreCase("null")) 
            {{ setVariable(False, 'validInput', 'false') }}
        {% else %}
        if(value.equalsIgnoreCase("null")) 
            {{ setVariable(False, 'validInput', 'false') }}
        {% endif %}    
    }
    {% endif %}
    {% if global['isBoolean'] or global['isArrayBoolean'] %}
    {% if global['isString'] or global['isArrayString'] %}{{ '\t\telse if' }}{% else %}{{ '\t\tif' }}{% endif %}(type.equals("boolean")) {
        {% if global['isArrayBoolean'] %}
        if(array) {
            {{ setVariable(False, 'deserializeJson(value_doc, value)') }}
            {{ setVariable(False, 'array_value', 'value_doc.as<JsonArray>()') }}
            for(i=0; i<array_value.size(); i++) {
                {{ defineVariable('string_nq', 'ae', 'array_value[i]') }}
                if(!ae.equals("true") && !ae.equals("false")) {
                    {{ setVariable(False, 'validInput', 'false') }}
                    break;
                }
            }
        }
        else if(!value.equals("true") && !value.equals("false"))
            {{ setVariable(False, 'validInput', 'false') }}
        {% else %}   
    if(!value.equals("true") && !value.equals("false"))
        {{ setVariable(False, 'validInput', 'false') }}
        {%- endif %} 
    }
    {% endif %}
    {% if global['isInteger'] or global['isArrayInteger'] %}
    {% if global['isString'] or global['isArrayString'] or global['isBoolean'] or global['isArrayBoolean'] %}{{ '\t\telse if' }}{% else %}{{ '\t\tif' }}{% endif %}(type.equals("integer")) {
        {% if global['isArrayInteger'] %}
        if(array) {
            {{ setVariable(False, 'deserializeJson(value_doc, value)') }}
            {{ setVariable(False, 'array_value', 'value_doc.as<JsonArray>()') }}
            for(i=0; i<array_value.size(); i++) {
                {{ defineVariable('string_nq', 'ae', 'array_value[i]') }}
                {{ setVariable(False, 'j', 0) }}
                while(validInput && j<ae.length()) { 
                    if(!isDigit(ae[j])) 
                        {{ setVariable(False, 'validInput', 'false') }}
                    {{ setVariable(False, 'j++') }}    
                }
                if(!validInput)   
                    break; 
            }
            {% if global['isArrayMin'] or global['isArrayMax'] %}
            if(validInput) {
                {{ defineVariable('int', 'input[array_value.size()]', '{}') }}
                for(i=0; i<array_value.size(); i++) 
                    {{ setVariable(False, 'input[i]', 'array_value[i].toInt()') }}
                {% if global['isArrayMin'] %}
                if(!obj_schema["minimum"].isNull()) 
                    for(i=0; i<array_value.size(); i++)
                        if(input[i] < obj_schema["minimum"]) {
                            {{ setVariable(False, 'validInput', 'false') }}
                            break;
                        }
                {% endif %}
                {% if global['isArrayMax'] %}        
                if(!obj_schema["maximum"].isNull())  
                    for(i=0; i<array_value.size(); i++)
                        if(input[i] > obj_schema["maximum"]) {
                            {{ setVariable(False, 'validInput', 'false') }}
                            break;
                        }   
                {% endif %}          
            }
            {% endif %}       
        }
        else {
            {{ setVariable(False, 'i', 0) }}
            while(validInput && i<value.length()) {
                if(!isDigit(value[i])) 
                    {{ setVariable(False, 'validInput', 'false') }}
                {{ setVariable(False, 'i++') }}          
            } 
            {% if global['isMin'] or global['isMax'] %}
            if(validInput) {
                {{ defineVariable('int', 'input', 'value.toInt()') }}
                {% if global['isMin'] %}
                if(!obj_schema["minimum"].isNull()) 
                    if(input < obj_schema["minimum"])
                        {{ setVariable(False, 'validInput', 'false') }}
                {% endif %}
                {% if global['isMax'] %}        
                if(!obj_schema["maximum"].isNull())  
                    if(input > obj_schema["maximum"])
                        {{ setVariable(False, 'validInput', 'false') }}     
                {% endif %}          
            }
            {% endif %}
        }
        {% else %}
        {{ setVariable(False, 'i', 0) }}
        while(validInput && i<value.length()) {
            if(!isDigit(value[i])) 
                {{ setVariable(False, 'validInput', 'false') }}
            {{ setVariable(False, 'i++') }}          
        } 
        {% if global['isMin'] or global['isMax'] %}
        if(validInput) {
            {{ defineVariable('int', 'input', 'value.toInt()') }}
            {% if global['isMin'] %}
            if(!obj_schema["minimum"].isNull()) 
                if(input < obj_schema["minimum"])
                    {{ setVariable(False, 'validInput', 'false') }}
            {% endif %}
            {% if global['isMax'] %}        
            if(!obj_schema["maximum"].isNull())  
                if(input > obj_schema["maximum"])
                    {{ setVariable(False, 'validInput', 'false') }}     
            {% endif %}          
        }
        {% endif %}
        {% endif %}
    }
    {% endif %}
    {% if global['isArray']  %}
    {% if global['isString'] or global['isArrayString'] or global['isBoolean'] or global['isArrayBoolean'] or global['isInteger'] or global['isArrayInteger'] %}{{ '\t\telse if' }}{% else %}{{ '\t\tif' }}{% endif %}(type.equals("array")) {
        {{ setVariable(False, 'deserializeJson(value_doc, value)') }}
        {{ setVariable(False, 'array_value', 'value_doc.as<JsonArray>()') }}
        if(array_value.isNull()) 
            {{ setVariable(False, 'validInput', 'false') }}
        else {
            {% if global['isMinItems'] %}
            if(!obj.schema["minItems"].isNull())
                if(array_value.size() < obj.schema["minItems"])    
                    {{ setVariable(False, 'validInput', 'false') }}
            {% endif %}
            {% if global['isMaxItems'] %}
            if(!obj.schema["maxItems"].isNull())
                if(array_value.size() > obj.schema["maxItems"])    
                    {{ setVariable(False, 'validInput', 'false') }}
            {% endif %}
            {% if global['isMinItems'] or global['isMaxItems'] %}
            if(validInput) {
                {{ setVariable(True, 'schema', '') }}
                {{ setVariable(False, 'serializeJson(obj_schema["items"], schema)') }}
                {{ setVariable(False, 'validInput', 'handleType(value, schema, true)') }}
            }
            {% else %}
            {{ setVariable(True, 'schema', '') }}
            {{ setVariable(False, 'serializeJson(obj_schema["items"], schema)') }}
            {{ setVariable(False, 'validInput', 'handleType(value, schema, true)') }}
            {% endif %}
        }
    }
    {% endif %}
    {% if global['isObject'] or global['isArrayObject'] %}
    {% if global['isArrayObject'] and global['isProperty'] %}
    {% if global['isString'] or global['isArrayString'] or global['isBoolean'] or global['isArrayBoolean'] or global['isInteger'] or global['isArrayInteger'] or global['isArray'] %}{{ '\t\telse if' }}{% else %}{{ '\t\tif' }}{% endif %}(type.equals("object")) {
        if(array) {
            {{ setVariable(False, 'deserializeJson(value_doc, value)') }}
            {{ setVariable(False, 'array_value', 'value_doc.as<JsonArray>()') }}
            for(i=0; i<array_value.size(); i++) {
                {% if global['isRequired'] %}
                for(j=0; j<obj_schema["required"].size(); j++) {
                    {{ setVariable(False, 'p', 'iv') }}
                    {{ setVariable(False, 'serializeJson(obj_schema["required"][j], p)') }}
                    {{ setVariable(False, 'p.replace("\\"", "")') }}
                    if(array_value[i][p].isNull()) {
                        {{ setVariable(False, 'validInput', 'false') }}
                        break;
                    }
                }
                if(validInput) {
                    for(j=0; i<obj_schema["properties"].size(); j++) {
                        {{ setVariable(False, 'p', 'iv') }}
                        {{ setVariable(False, 'serializeJson(obj_schema["properties"][j]["name"], p)') }}
                        {{ setVariable(False, 'p.replace("\\"", "")') }}
                        if(!array_value[i][p].isNull()) {
                            {{ setVariable(True, 'schema', '') }}
                            {{ setVariable(True, 'value', '') }}
                            {{ setVariable(False, 'serializeJson(obj_schema["properties"][j], schema)') }}
                            {{ setVariable(False, 'serializeJson(array_value[i][p], value)') }}
                            {% if global['isArray'] %}
                            {{ setVariable(False, 'validInput', 'handleType(value, schema, false)') }} 
                            {% else %}
                            {{ setVariable(False, 'validInput', 'handleType(value, schema)') }} 
                            {% endif %}
                        }
                    }
                }
                else
                    break;    
                {% else %}
                for(j=0; j<obj_schema["properties"].size(); j++) {
                    {{ setVariable(False, 'p', 'iv') }}
                    {{ setVariable(False, 'serializeJson(obj_schema["properties"][j]["name"], p)') }}
                    {{ setVariable(False, 'p.replace("\\"", "")') }}
                    if(!array_value[i][p].isNull()) {
                        {{ setVariable(True, 'schema', '') }}
                        {{ setVariable(True, 'value', '') }}
                        {{ setVariable(False, 'serializeJson(obj_schema["properties"][j], schema)') }}
                        {{ setVariable(False, 'serializeJson(array_value[i][p], value)') }}
                        {% if global['isArray'] %}
                        {{ setVariable(False, 'validInput', 'handleType(value, schema, false)') }} 
                        {% else %}
                        {{ setVariable(False, 'validInput', 'handleType(value, schema)') }} 
                        {% endif %}
                    }
                }
                {% endif %}
            }
        }
        else {
            {{ setVariable(False, 'deserializeJson(value_doc, value)') }}
            {{ setVariable(False, 'obj_value', 'value_doc.as<JsonObject>()') }}
            if(obj_value.isNull())
                {{ setVariable(False, 'validInput', 'false') }}
            {% if global['isProperty'] %}
            else {
                {% if global['isRequired'] %}
                for(i=0; i<obj_schema["required"].size(); i++) {
                    {{ setVariable(False, 'p', 'iv') }}
                    {{ setVariable(False, 'serializeJson(obj_schema["required"][i], p)') }}
                    {{ setVariable(False, 'p.replace("\\"", "")') }}
                    if(obj_value[p].isNull()) {
                        {{ setVariable(False, 'validInput', 'false') }}
                        break;
                    }
                }
                if(validInput) {
                    for(i=0; i<obj_schema["properties"].size(); i++) {
                        {{ setVariable(True, 'p', '') }}
                        {{ setVariable(False, 'serializeJson(obj_schema["properties"][i]["name"], p)') }}
                        {{ setVariable(False, 'p.replace("\\"", "")') }}
                        if(!obj_value[p].isNull()) {
                            {{ setVariable(True, 'schema', '') }}
                            {{ setVariable(True, 'value', '') }}
                            {{ setVariable(False, 'serializeJson(obj_schema["properties"][i], schema)') }}
                            {{ setVariable(False, 'serializeJson(obj_value[p], value)') }}
                            {% if global['isArray'] %}
                            {{ setVariable(False, 'validInput', 'handleType(value, schema, false)') }} 
                            {% else %}
                            {{ setVariable(False, 'validInput', 'handleType(value, schema)') }} 
                            {% endif %}
                        }
                    }
                }
                {% else %}
                for(i=0; i<obj_schema["properties"].size(); i++) {
                    {{ setVariable(True, 'p', '') }}
                    {{ setVariable(False, 'serializeJson(obj_schema["properties"][i]["name"], p)') }}
                    {{ setVariable(False, 'p.replace("\\"", "")') }}
                    if(!obj_value[p].isNull()) {
                        {{ setVariable(True, 'schema', '') }}
                        {{ setVariable(True, 'value', '') }}
                        {{ setVariable(False, 'serializeJson(obj_schema["properties"][i], schema)') }}
                        {{ setVariable(False, 'serializeJson(obj_value[p], value)') }}
                        {% if global['isArray'] %}
                        {{ setVariable(False, 'validInput', 'handleType(value, schema, false)') }} 
                        {% else %}
                        {{ setVariable(False, 'validInput', 'handleType(value, schema)') }} 
                        {% endif %}
                    }
                }
                {% endif %}
            }
            {% endif %}
        }
    }
    {% elif not(global['isArrayObject']) %}
    else if(type.equals("object")) {
        {{ setVariable(False, 'deserializeJson(value_doc, value)') }}
        {{ setVariable(False, 'obj_value', 'value_doc.as<JsonObject>()') }}
        if(obj_value.isNull())
            {{ setVariable(False, 'validInput', 'false') }}
        {% if global['isProperty'] %}
        else {
            {% if global['isRequired'] %}
            for(i=0; i<obj_schema["required"].size(); i++) {
                {{ setVariable(True, 'p', '') }}
                {{ setVariable(False, 'serializeJson(obj_schema["required"][i], p)') }}
                {{ setVariable(False, 'p.replace("\\"", "")') }}
                if(obj_value[p].isNull()) {
                    {{ setVariable(False, 'validInput', 'false') }}
                    break;
                }
            }
            if(validInput) {
                for(i=0; i<obj_schema["properties"].size(); i++) {
                    {{ setVariable(True, 'p', '') }}
                    {{ setVariable(False, 'serializeJson(obj_schema["properties"][i]["name"], p)') }}
                    {{ setVariable(False, 'p.replace("\\"", "")') }}
                    if(!obj_value[p].isNull()) {
                        {{ setVariable(True, 'schema', '') }}
                        {{ setVariable(True, 'value', '') }}
                        {{ setVariable(False, 'serializeJson(obj_schema["properties"][i], schema)') }}
                        {{ setVariable(False, 'serializeJson(obj_value[p], value)') }}
                        {% if global['isArray'] %}
                        {{ setVariable(False, 'validInput', 'handleType(value, schema, false)') }} 
                        {% else %}
                        {{ setVariable(False, 'validInput', 'handleType(value, schema)') }} 
                        {% endif %}
                    }
                }
            }
            {% else %}
            for(i=0; i<obj_schema["properties"].size(); i++) {
                {{ setVariable(True, 'p', '') }}
                {{ setVariable(False, 'serializeJson(obj_schema["properties"][i]["name"], p)') }}
                {{ setVariable(False, 'p.replace("\\"", "")') }}
                if(!obj_value[p].isNull()) {
                    {{ setVariable(True, 'schema', '') }}
                    {{ setVariable(True, 'value', '') }}
                    {{ setVariable(False, 'serializeJson(obj_schema["properties"][i], schema)') }}
                    {{ setVariable(False, 'serializeJson(obj_value[p], value)') }}
                    {% if global['isArray'] %}
                    {{ setVariable(False, 'validInput', 'handleType(value, schema, false)') }} 
                    {% else %}
                    {{ setVariable(False, 'validInput', 'handleType(value, schema)') }} 
                    {% endif %}
                }
            }
            {% endif %}
        }
        {% endif %}  
    }
    {% endif %}
    {% endif %}
    {{ setVariable(False, 'return validInput') }}
}
{% endif %}

// Request functions
void handleReq1() {
    {{ defineVariable('String', 'resp', 'iv') }}

    Serial.println("\nGET thing url");
    {{ setVariable(True, 'resp', '[\\"" + urlServer + "\\"]') }}
    server.send(200, "application/ld+json", resp);
}

void handleReq2() {
    Serial.println("\nGET Thing Description"); 
    server.send(200, "application/ld+json", td);
}

void handleReq3() {
    DynamicJsonDocument tmp(1024);
    {{ defineVariable('String', 'resp', 'iv') }}
    {{ defineVariable('JsonObject', 'obj', 'tmp.createNestedObject()') }}

    Serial.print("\nGET all properties");
    {% for i in range(1, template['numproperties']+1) %}
    {{ setVariable(False, 'obj[property' + i | string + '_name]', 'property' + i | string + '_value') }}
    {% endfor %}
    {{ setVariable(False, 'serializeJson(obj, resp)') }}
    server.send(200, "application/ld+json", resp);
}

{# HandleReq for Properties #}
{% for property in template['properties'] %}
{% set i = loop.index %}
void handleReq{{ i+3 }}() {
    {{ defineVariable('String', 'resp', '') }}
    {% if property['type'] == 'object' or property['type'] == 'array' %}
    {{ defineVariable('String', 'tmp', '') }}
    {% endif %}

    Serial.printf("\nGET %s value", property{{ i }}_name);
    {% if property['type'] == 'object' or property['type'] == 'array' %}
    {{ setVariable(False, 'serializeJson(property' + i | string + '_value, tmp)') }}
    {{ setVariable(True, 'resp', '{\\"" + (String) property' + i | string + '_name + "\\":" + tmp + "}') }}
    {% else %}
    {{ setVariable(True, 'resp', '{\\"" + (String) property' + i | string + '_name + "\\":" + property' + i | string + '_value + "}') }}
    {% endif %}
    server.send(200, "application/ld+json", resp);
}

{% endfor -%}

{# HandleReq for Actions #}
{% for action in template['actions'] %}
{%- set a = loop.index -%}
void handleReq{{ loop.index+3+template['numproperties'] }}() {
    DynamicJsonDocument resp_doc(1024);
    {{ defineVariable('String', 'resp', 'iv') }}

    Serial.printf("\nPOST invokeaction %s", action{{ loop.index }}_name);
    String body = server.arg("plain");
    Serial.printf("Body received: %s", body.c_str());
    
    {{ setVariable(False, 'err', 'deserializeJson(resp_doc, body)') }}
    if(err) {
        Serial.printf("deserializeJson() failed with code %s", err.c_str());
        server.send(400, "text/plain", err.c_str());
    }
    else {
        {% if action['input'] | length > 0 %}
        if(
        {%- for item in action['input'] -%}
        resp_doc["{{ item['name'] }}"].isNull() 
        {%- if not(loop.last) -%}
        {{ ' || ' }}
        {%- endif -%}
        {%- endfor -%}
        ) {
            {{ setVariable(True, 'resp', 'InvalidInput') }}
            server.send(400, "text/plain", resp);
        }
        else {
            {{ defineVariable('bool', 'validInput', 'true') }}
            {{ defineVariable('String', 'value', 'iv') }}

            {{ defineVariable('string_nq', 'action' + a | string + '_input[' + action['input'] | length | string + ']', '{}') }}    
            {% for item in action['input'] %}
            {{ defineVariable(item['type'], 'action' + a | string + '_input' + loop.index | string + '_value', 'iv') }}
            {% endfor %}

            {{ setVariable(False, 'i', 0) }}
            while(validInput and i<{{ 'action' + a | string + '_inputsNumber'}}) {
                switch(i) {
                    {% for item in action['input'] %}
                    case {{ loop.index0 }}: {
                        {{ setVariable(True, 'value', '') }}
                        {{ setVariable(False, 'serializeJson(resp_doc["' + item['name'] + '"], value)') }}
                        {{ setVariable(False, 'action' + a | string + '_input[' + loop.index0 | string + ']', 'value') }}
                        {% if global['isArray'] %}
                        {{ setVariable(False, 'validInput', 'handleType(value,action' + a | string + '_schema[' + loop.index0 | string + '],false)') }}
                        {% else %}
                        {{ setVariable(False, 'validInput', 'handleType(value,action' + a | string + '_schema[' + loop.index0 | string + '])') }}
                        {% endif %}
                    }
                    break;

                    {% endfor %}
                }
                {{ setVariable(False, 'i++') }}
            }    

            if(validInput) {
                {% for item in action['input'] %}
                {% if item['type'] == 'array' or item['type'] == 'object' %}
                DynamicJsonDocument input{{ loop.index }}_doc(1024);
                {% endif %}
                {% endfor %}

                {% for item in action['input'] %}
                {% if item['type'] == 'integer' %}
                {{ setVariable(False, 'action' + a | string + '_input' + loop.index | string + '_value', 'action' + a | string + '_input[' + loop.index0 | string + '].toInt()') }}
                {% elif item['type'] == 'number' %}
                {{ setVariable(False, 'action' + a | string + '_input' + loop.index | string + '_value', 'action' + a | string + '_input[' + loop.index0 | string + '].toDouble()') }}
                {% elif item['type'] == 'boolean' %}
                if(action{{ a }}_input[{{ loop.index0 }}].equals("true")) {
                    {{ setVariable(False, 'action' + a | string + '_input' + loop.index | string + '_value', 'true') }}
                }
                else { 
                    {{ setVariable(False, 'action' + a | string + '_input' + loop.index | string + '_value', 'false') }}
                }
                {% elif item['type'] == 'string'%}
                {{ setVariable(False, 'action' + a | string + '_input' + loop.index | string + '_value', 'action' + a | string + '_input[' + loop.index0 | string + ']') }}
                }
                {% elif item['type'] == 'null' %}
                {{ setVariable(False, 'serializeJson(resp_doc["' + item['name'] + '"], action' + a | string +'_input' + loop.index | string +'_value)') }}
                {% elif item['type'] == 'array' %}
                {{ setVariable(False, 'deserializeJson(input' + loop.index | string  + '_doc, action' + a | string + '_input[' + loop.index0 | string + '])') }}
                {{ setVariable(False, 'action' + a | string + '_input' + loop.index | string + '_value', 'input' + loop.index | string  + '_doc.as<JsonArray>()') }}
                {% elif item['type'] == 'object' %}
                {{ setVariable(False, 'deserializeJson(input' + loop.index | string  + '_doc, action' + a | string + '_input[' + loop.index0 | string + '])') }}
                {{ setVariable(False, 'action' + a | string + '_input' + loop.index | string + '_value', 'input' + loop.index | string + '_doc.as<JsonObject>()') }}
                {% endif %}
                {% endfor %}

                {% if 'type' in action['output'] %}
                {{ castType(action['output']['type']) }} output = {{ action['name'] }}(
                {%- for item in action['input'] -%}
                {%- if loop.last -%}
                action{{ a }}_input{{ loop.index }}_value
                {%- else -%}
                action{{ a }}_input{{ loop.index }}_value,
                {%- endif -%}
                {%- endfor -%}
                );   
                {%- else %}
                {{ action['name'] }}(
                    {%- for item in action['input'] -%}
                    {%- if loop.last -%}
                    action{{ a }}_input{{ loop.index }}_value
                    {%- else -%}
                    action{{ a }}_input{{ loop.index }}_value,
                    {%- endif -%}
                    {%- endfor -%}
                ); 
                {% endif %}
                {% if 'type' in action['output'] %}    
                {% if action['output']['type'] != 'string' or action['output']['type'] != 'null' %}
                server.send(200, "text/plain", (char*) output);
                {% else %}
                server.send(200, "text/plain", output);
                {% endif %}
                {% else %}
                server.send(200, "text/plain", "");
                {% endif %}
            }
            else {
                {{ setVariable(True, 'resp', 'InvalidInput') }}
                server.send(400, "text/plain", resp);
            }
        }
        {% else %}
        {% if 'type' in action['output'] %}
            {{ castType(action['output']['type']) }} output = {{ action['name'] }}();
        {%- else %}
        {{ action['name'] }}(); 
        {% endif %}
        {% if 'type' in action['output'] %}    
        {% if action['output']['type'] != 'string' or action['output']['type'] != 'null' %}
        server.send(200, "text/plain", (char*) output);
        {% else %}
        server.send(200, "text/plain", output);
        {% endif %}
        {% else %}
        server.send(200, "text/plain", "");
        {% endif %}
        {% endif %}  
        {% if template['numevents'] > 0 %}
        {% for event in template['events'] %}
        {% if event['action'] == action['name'] %}
        
        // {{ event['name'] }} condition
        {{ event['condition'] }}
        {% endif %}
        {% endfor %}
        {% endif %}
    }
}
{% endfor %}

{# Events #}
{% if template['numevents'] > 0 %}
// handle Events
void webSocketEvent(uint8_t num, WStype_t type, uint8_t* pl, size_t length) {
    IPAddress ip;
    {{ defineVariable('String', 'nums', 'iv') }}
    {{ defineVariable('String', 'message', 'iv') }}
    {{ defineVariable('char_nq', 'payload', '(char *) pl') }}
    JsonObject obj;

    Serial.println();

    switch(type) {
        case WStype_DISCONNECTED: {
            Serial.print(num);
            Serial.println(" -> Disconnected");

            // remove all client subscriptions
            {{ setVariable(False, 'nums', '(String) num') }}
            {{ setVariable(False, 'e_doc.remove(nums)') }}
            {{ setVariable(False, 'serializeJson(e_doc, Serial)') }}
            Serial.println();
        }
        break;

        case WStype_CONNECTED: {
            {{ setVariable(False, 'ip', 'webSocket.remoteIP(num)') }}
            Serial.print(num);
            Serial.print(" -> Connection request from ");
            Serial.println(ip);
            Serial.printf("Payload: %c\n", payload);

            {{ setVariable(False, 'nums', '(String) num') }}
            for(i=0; i<events_number; i++) {
                if(events_endpoint[i].equals(payload)) {
                    if(e_doc[nums].isNull()) 
                        {{ setVariable(False, 'obj', 'e_doc.createNestedArray(nums).createNestedObject()') }}
                    else 
                        {{ setVariable(False, 'obj', 'e_doc[nums].createNestedObject()') }}                    

                    {{ setVariable(False, 'obj[events_list[i]]', 'false') }}
                    webSocket.sendTXT(num, "Connection accepted");
                    break;
                }
            }

            {{ setVariable(False, 'serializeJson(e_doc, Serial)') }}
            Serial.println();
            
        }
        break;

        case WStype_TEXT:
        { 
            DynamicJsonDocument resp_doc(1024);
            {{ defineVariable('bool', 'validInput', 'true') }}
            {{ defineVariable('String', 'term', 'iv') }}
            {{ defineVariable('char*', 'dataType[2]', '{"subscription", "cancellation"}') }}

            {{ setVariable(False, 'ip', 'webSocket.remoteIP(num)') }}
            Serial.print(num);  
            Serial.print(" -> Get Text from ");
            Serial.println(ip);
            Serial.printf("Payload: %c\n", payload);

            {{ setVariable(False, 'nums', '(String) num') }}
            {{ setVariable(False, 'err', 'deserializeJson(resp_doc, payload)') }}
            if(err) {
                Serial.printf("deserializeJson() failed with code %s", err.c_str());
                webSocket.sendTXT(num, "deserializeJson failed");
            }
            else {
                
            }

            for(i=0; i<events_number; i++) {
                message = "Subscribe " + events_list[i];
                if(message.equals(payload)) {
                    webSocket.sendTXT(num, "Subscription accepted");
                    if(e_doc[nums].isNull()) {
                        JsonObject obj = e_doc.createNestedArray(nums).createNestedObject();
                        obj[events_list[i]] = true;
                    }
                    else {
                        int count = 0;
                        for(j=0; j<e_doc[nums].size(); j++) {
                            if(!e_doc[nums][j][events_list[i]]) {
                                count++;
                            }
                        }
                        if(count == e_doc[nums].size()) {
                            JsonObject obj = e_doc[nums].createNestedObject();
                            obj[events_list[i]] = true;
                        }
                    }
                    serializeJson(e_doc, Serial);
                    Serial.println();
                    break;
                }
                else
                    webSocket.sendTXT(num, "Subscription not accepted"); 
            }
        }
        break;
    }
}
{% endif %}

{% if template['functions'] | length > 0 %}
{% for fun in template['functions'] %}
{{ defineFunction(fun['name'], fun['inputs'], fun['output'], fun['body'], False) }}

{% endfor %}
{% endif %}