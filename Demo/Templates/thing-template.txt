{% macro updateEndPoints() -%}
{#- EndPoint Thing #}
{%- for item in td['forms'] if 'href' in item %}
    {%- do item.update(href='" + urlServer + "/all/properties') -%}
{%- endfor %}    
{#- EndPoint Properties #}
{%- for property in template['properties'] %}
    {%- set i = loop.index -%}
    {%- for item in td['properties'][property['name']]['forms'] if 'href' in item -%}
        {%- do item.update(href='" + urlServer + "/properties/" + property' + i | string + '_name + "' ) -%}
    {%- endfor -%}
{%- endfor %}
{#- EndPoint Actions  #}    
{%- for action in template['actions'] %}
    {%- set i = loop.index -%}
    {%- for item in td['actions'][action['name']]['forms'] if 'href' in item -%}
        {%- do item.update(href='" + urlServer + "/actions/" + action' + i | string + '_name + "' ) -%}
    {%- endfor -%}
{%- endfor %}     
{#- EndPoint Events  #}    
{%- for event in template['events'] %}
    {%- set i = loop.index -%}
    {%- for item in td['events'][event['name']]['forms'] if 'href' in item -%}
        {%- do item.update(href='" + urlSocket + "/events/" + event' + i | string + '_name + "' ) -%}
    {%- endfor -%}
{%- endfor %}   
{%- endmacro %}

{% macro defineVariable(typeV, name, value) -%}
    {%- if value is iterable and value is not string %}
{{ typeV }} {{ name }} = 
        {%- for elem in value -%}
            {%- if loop.last -%} 
                {{ ' ' + elem }};
            {%- else -%}
                {{ ' ' + elem }}
            {%- endif -%}
        {%- endfor -%}     
    {%- elif (typeV == 'const char*') or (typeV == 'String' and value != 'NULL') or (typeV == 'string') %}
{{ typeV }} {{ name }} = "{{ value }}";
    {%- elif typeV == 'integer' or typeV == 'number' %}
int {{ name }} = {{ value }};
    {% else %}
{{ typeV }} {{ name }} = {{ value }};    
    {%- endif %}    
{%- endmacro %}

{% macro defineFunction(name, input, output, body) -%}
{%- if 'type' in output -%}
    {%- if output['type'] == 'integer' or output['type'] == 'number' -%}
int 
    {%- elif output['type'] == 'string' or output['type'] == 'null' -%}
String
    {%- elif output['type'] == 'boolean' -%}
{{ output['type'] }} 
    {%- endif -%}  
{%- else -%}      
void       
{%- endif -%}        
{{ ' ' + name }}(
    {%- for item in input -%}
        {%- if item['type'] == 'integer' or item['type'] == 'number' -%}
            int
        {%- elif item['type'] == 'string' or item['type'] == 'null' -%}
            String
        {%- elif item['type'] == 'boolean' -%}
            {{ item['type'] }} 
        {%- endif -%} 
        {%- if loop.last -%}      
        {{ ' ' + item['name'] }}
        {%- else -%} 
        {{ ' ' + item['name'] }},
        {%- endif -%}
    {%- endfor -%}
) {
    {{ body }}
    {% if 'name' in output %}
    return {{ output['name'] }};
    {% endif %}
}    
{%- endmacro %}

{{ updateEndPoints() }}

{% set ssid = template['ssid'] %}
{% set password = template['password'] %}
{% set protocolServer = 'http' %}
{% set protocolSocket = 'ws' %}
{% set portServer = template['portserver'] %}
{% set portSocket = template['portsocket'] %}
{% set ipServer = '192.168.1.5' %}
{% set thingName = td['title'].lower() %}
{% set urlServer = protocolServer + "://" + ipServer + ":" + portServer + "/" + thingName %}
{% set thingD = td | replace("'", '\\"') | replace(' ', '') %}
{% set req = [] %}

#include <ESP8266WebServer.h>
#include <WebSocketsServer.h>
#include <ArduinoJson.h>

{{ defineVariable('const char*', 'ssid', ssid) }}
{{ defineVariable('const char*', 'password', password) }}
{{ defineVariable('String', 'protocolServer', protocolServer) }}
{{ defineVariable('int', 'portServer', portServer) }}
{{ defineVariable('String', 'urlServer', '') }}
{% if template['numevents'] != 0 %}
{{ defineVariable('String', 'protocolSocket', protocolSocket) }}
{{ defineVariable('int', 'portSocket', portSocket) }}
{{ defineVariable('String', 'urlSocket', '') }}
{% endif %}

{{ defineVariable('String', 'thingName', thingName) }}
{{ defineVariable('String', 'td', '') }}

{{ defineVariable('int', 'properties_number', template['numproperties']) }}
{{ defineVariable('int', 'actions_number', template['numactions']) }}
{{ defineVariable('int', 'events_number', template['numevents']) }}

//properties
{% for property in template['properties'] %}
{{ defineVariable('String', 'property' + loop.index | string + '_name', property['name']) }}
    {% if property['type'] == 'integer' or property['type'] == 'number' %}
{{ defineVariable('int', 'property' + loop.index | string + '_value', 0) }}
    {%- elif property['type'] == 'boolean' %}   
{{ defineVariable('boolean', 'property' + loop.index | string + '_value', 'false') }}
    {%- elif property['type'] == 'string' -%}       
{{ defineVariable('String', 'property' + loop.index | string + '_value', '') }}
    {%- elif property['type'] == 'null' %}       
{{ defineVariable('String', 'property' + loop.index | string + '_value', 'NULL') }} 
    {% endif %}   
{% endfor %}   
//actions
{% for action in template['actions'] %}
{%- set actionIndex = 'action' + loop.index | string -%}
{{ defineVariable('String', actionIndex + '_name', action['name']) }}
{{ defineVariable('int', actionIndex + '_inputsNumber', action['input'] | length) }}
{% for item in action['input'] %}
{% if loop.first %}
{{ defineVariable('JsonArray',  actionIndex + '_input', 'doc.createNestedArray("' + actionIndex + '_input' + '")') }}
{% endif %}
{{ defineVariable('JsonObject', actionIndex + '_input' + loop.index | string, 'doc["' + actionIndex + '_input' + '"].createNestedObject()') }}
{% endfor %}
{% for item in action['input'] %}
{{ actionIndex + '_input' + loop.index | string }}["name"] = "{{ item['name'] }}";
{{ actionIndex + '_input' + loop.index | string }}["type"] = "{{ item['type'] }}";
{% if loop.last -%}
{{ '\n' }}
{%- endif %}
{% endfor %}
{% endfor %}

//events
{% for event in template['events'] %}
{{ defineVariable('String', 'event' + loop.index | string + '_name', event['name']) }}
{% endfor %}
String events_list[{{ template['numevents'] }}] = {
    {%- for i in range(1, template['numevents']+1) -%}
    {%- if i == template['numevents'] -%}
    {{ 'event' + i | string + '_name' }}
    {%- else -%}
    {{ 'event' + i | string + '_name' }},
    {%- endif -%}
    {%- endfor -%}
};

//requests
{{ defineVariable('String', 'req1', '/') }}
{% do req.append(('req1', 'HTTP_GET')) %}
{{ defineVariable('String', 'req2', ['"/"', '+', 'thingName']) }}
{% do req.append(('req2', 'HTTP_GET')) %}
{{ defineVariable('String', 'req3', ['"/"', '+', 'thingName', '+', '"/all/properties"' ]) }}
{% do req.append(('req3', 'HTTP_GET')) %}
{% for i in range(1, template['numproperties']+1) %}
{% set request = 'req' + (i + 3) | string %}
{{ defineVariable('String', request, ['"/"', '+', 'thingName', '+', '"/properties/"', '+', 'property' + i | string + '_name']) }}
{% do req.append((request, 'HTTP_GET')) %}
{% endfor %}
{% for i in range(1, template['numactions']+1) %}
{% set request = 'req' + (i + 3 + template['numproperties']) | string %}
{{ defineVariable('String', request, ['"/"', '+', 'thingName', '+', '"/actions/"', '+', 'action' + i | string + '_name']) }}
{% do req.append((request, 'HTTP_POST')) %}
{% endfor %}

ESP8266WebServer server(portServer);
{% if template['numevents'] != 0 %}
WebSocketsServer webSocket = WebSocketsServer(portSocket);
{% endif %}

IPAddress ipS;

String header;
String resp;
DynamicJsonDocument doc(1024);
DynamicJsonDocument respDoc(1024);
DeserializationError err;

int i, j;

void setup() {
    Serial.begin(115200);
    Serial.println();
  
    connection(ssid, password);
    
    td = "{{ thingD }}";

    // server requests
    {% for r in req %}
    server.on({{ r[0] }},{{ r[1] }},{{ 'handleReq' + loop.index | string }});
    {% endfor %}

    server.begin();
    
    {% if template['numevents'] != 0 %}
    webSocket.begin();
    webSocket.onEvent(webSocketEvent);
    {% endif %}

    Serial.println("Server started");
    Serial.println(urlServer);
}    

void loop() {
    // handle requests
    {% if template['numevents'] != 0 %}
    webSocket.loop()
    {% endif %}
    server.handleClient();
}

void connection(const char* ssid, const char* password) {
    WiFi.begin(ssid, password);
    
    Serial.print("\nConnecting to ");
    Serial.print(ssid);

    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.print(".");
 
    }

    Serial.println("\nConnected");
    Serial.print("IP address: ");
    ipS = WiFi.localIP();
    Serial.println(ipS);

    urlServer = protocolServer + "://" + ipS.toString() + ":" + portServer + "/" + thingName;
    urlSocket = protocolSocket + "://" + ipS.toString() + ":" + portSocket + "/" + thingName;
}

// action functions
{% for action in template['actions'] %}
{{ defineFunction(action['name'], action['input'], action['output'], action['body']) }}

{% endfor %}

// request functions
void handleReq1() {
    Serial.println("\nGET thing url");
    resp = "[\"" + urlServer + "\"]";
    server.send(200, "application/ld+json", resp);
}

void handleReq2() {
    Serial.println("\nGET Thing Description"); 
    server.send(200, "application/ld+json", td);
}

void handleReq3() {
    Serial.print("\nGET all properties");
    JsonObject obj = doc.createNestedObject();
    {% for i in range(1, template['numproperties']+1) %}
    obj[{{ 'property' + i | string + '_name' }}] = {{ 'property' + i | string + '_value' }};
    {% endfor %}
    server.send(200, "application/ld+json", obj);
}

{# HandleReq for Properties #}
{% for i in range(1, template['numproperties']+1) %}
void handleReq{{ i+3 }}() {
    Serial.printf("\nGET %s value", property{{ i }}_name);
    resp = "{\"" + property{{ i }}_name + "\":" + property{{ i }}_value + "}";
    server.send(200, "application/ld+json", json);
}

{% endfor %}

{# HandleReq for Actions #}
{% for action in template['actions'] %}
{%- set a = loop.index -%}
void handleReq{{ loop.index+3+template['numproperties'] }}() {
    Serial.printf("\nPOST invokeaction %s", action{{ loop.index }}_name);
    String body = server.arg("plain");
    Serial.printf("Body received: %s", body.c_str());

    err = deserializeJson(respDoc, body);
    if(err) {
        Serial.printf("deserializeJson() failed with code %s", err.c_str());
        server.send(400, "text/plain", err);
    }
    else {
        {% if action['input'] | length > 0 %}
        if(
        {%- for item in action['input'] -%}
        respDoc[action{{ a }}_input{{ loop.index }}["name"]].isNull() 
        {%- if not(loop.last) -%}
        {{ ' or ' }}
        {%- endif -%}
        {%- endfor -%}
        ) {
            resp = "InvalidInput";
            server.send(400, "text/plain", resp);
        }
        else {
            {% if 'type' in action['output'] %}
            {{ action['output']['type'] }} output = {{ action['name'] }}(
                {%- for item in action['input'] -%}
                {%- if loop.last -%}
                respDoc[action{{ a }}_input{{ loop.index }}["name"]]
                {%- else -%}
                respDoc[action{{ a }}_input{{ loop.index }}["name"]],
                {%- endif -%}
                {%- endfor -%}
            );   
            {%- else %}
            {{ action['name'] }}(
                {%- for item in action['input'] -%}
                {%- if loop.last -%}
                respDoc[action{{ a }}_input{{ loop.index }}["name"]]
                {%- else -%}
                respDoc[action{{ a }}_input{{ loop.index }}["name"]],
                {%- endif -%}
                {%- endfor -%}
            ); 
            {% endif %}
            {% if 'type' in action['output'] %}    
            server.send(200, "text/plain", output);
            {% else %}
            resp = action{{ a }}_name + " invoked";
            server.send(200, "text/plain", resp);
            {% endif %}
        }
        {% else %}
        {% if 'type' in action['output'] %}
            {{ action['output']['type'] }} output = {{ action['name'] }}(
            {%- for item in action['input'] -%}
            {%- if loop.last -%}
            respDoc[action{{ a }}_input{{ loop.index }}["name"]]
            {%- else -%}
            respDoc[action{{ a }}_input{{ loop.index }}["name"]],
            {%- endif -%}
            {%- endfor -%}
        );
        {%- else %}
        {{ action['name'] }}(
            {%- for item in action['input'] -%}
            {%- if loop.last -%}
            respDoc[action{{ a }}_input{{ loop.index }}["name"]]
            {%- else -%}
            respDoc[action{{ a }}_input{{ loop.index }}["name"]],
            {%- endif -%}
            {%- endfor -%}
        ); 
        {% endif %}
        {% if 'type' in action['output'] %}    
        server.send(200, "text/plain", output);
        {% else %}
        resp = action{{ a }}_name + " invoked";
        server.send(200, "text/plain", resp);
        {% endif %}
        {% endif %}  
    }
}

{% endfor %}
