{% macro updateEndPoints() -%}
{#- EndPoint Thing #}
{%- for item in td['forms'] if 'href' in item %}
    {%- do item.update(href='" + urlServer + "/all/properties') -%}
{%- endfor %}    
{#- EndPoint Properties #}
{%- for property in template['properties'] %}
    {%- set i = loop.index -%}
    {%- for item in td['properties'][property['name']]['forms'] if 'href' in item -%}
        {%- do item.update(href='" + urlServer + "/properties/" + property' + i | string + '_name + "' ) -%}
    {%- endfor -%}
{%- endfor %}
{#- EndPoint Actions  #}    
{%- for action in template['actions'] %}
    {%- set i = loop.index -%}
    {%- for item in td['actions'][action['name']]['forms'] if 'href' in item -%}
        {%- do item.update(href='" + urlServer + "/actions/" + action' + i | string + '_name + "' ) -%}
    {%- endfor -%}
{%- endfor %}     
{#- EndPoint Events  #}    
{%- for event in template['events'] %}
    {%- set i = loop.index -%}
    {%- for item in td['events'][event['name']]['forms'] if 'href' in item -%}
        {%- do item.update(href='" + urlSocket + "/events/" + event' + i | string + '_name + "' ) -%}
    {%- endfor -%}
{%- endfor %}   
{%- endmacro %}

{% macro defineVariable(typeV, name, value) -%}
    {%- if value is iterable and value is not string %}
{{ typeV }} {{ name }} = 
        {%- for elem in value -%}
            {%- if loop.last -%} 
                {{ ' ' + elem }};
            {%- else -%}
                {{ ' ' + elem }}
            {%- endif -%}
        {%- endfor -%}     
    {%- elif (typeV == 'const char*') or (typeV == 'String' and value != 'NULL') %}
{{ typeV }} {{ name }} = "{{ value }}";
    {%- elif typeV == 'string' or (typeV == 'null' and (value != '' or value != 'NULL' )) -%}
String {{ name }} = "{{ value }}";
    {%- elif typeV == 'null' and (value == 'iv' or value == 'NULL') %}
String {{ name }} = NULL;    
    {%- elif typeV == 'integer' %}
    {%- if value == '' -%}
int {{ name }};
    {%- elif value == 'iv' -%}
int {{ name }} = 0;    
    {%- else -%}    
int {{ name }} = {{ value }};
    {%- endif -%}
    {%- elif typeV == 'number' %}
    {%- if value == '' -%}
double {{ name }};
    {%- elif value == 'iv' -%}
double {{ name }} = 0.0;
    {%- else -%}    
double {{ name }} = {{ value }};
    {%- endif -%}
    {% elif typeV == 'boolean' %}
    {%- if value == '' -%}
bool {{ name }};
    {%- elif value == 'iv' -%}
bool {{ name }} = false;    
    {%- else -%}    
bool {{ name }} = {{ value }};
    {%- endif -%}
    {% else %}
{{ typeV }} {{ name }} = {{ value }};    
    {%- endif %}    
{%- endmacro %}

{% macro setVariable(ifString, name, value='') -%}
{%- if ifString -%}
{{ name }} = "{{ value }}";
{%- elif value == '' -%}
{{ name }};
{%- else -%}
{{ name }} = {{ value }};
{%- endif -%}
{%- endmacro %}

{% macro defineFunction(name, input, output, body) -%}
{%- if 'type' in output -%}
{{ castType(output['type']) }}
{%- else -%}      
void       
{%- endif -%}        
{{ ' ' + name }}(
    {%- for item in input -%}
        {{ castType(item['type']) }}
        {%- if loop.last -%}      
        {{ ' ' + item['name'] }}
        {%- else -%} 
        {{ ' ' + item['name'] }},
        {%- endif -%}
    {%- endfor -%}
) {
    {{ body }}
    {% if 'name' in output %}
    return {{ output['name'] }};
    {% endif %}
}    
{%- endmacro %}

{% macro castType(type) -%}
{%- if type == 'integer' -%}
int
{%- elif type == 'number' -%}
double
{%- elif type == 'string' or type == 'null' -%}
String
{%- elif type == 'boolean' -%}
bool
{%- else -%}
{{ type }}
{%- endif -%}
{%- endmacro %}

{{ updateEndPoints() }}

{% set ssid = template['ssid'] %}
{% set password = template['password'] %}
{% set protocolServer = 'http' %}
{% set protocolSocket = 'ws' %}
{% set portServer = template['portserver'] %}
{% set portSocket = template['portsocket'] %}
{% set ipServer = '192.168.1.5' %}
{% set thingName = td['title'].lower() %}
{% set urlServer = protocolServer + "://" + ipServer + ":" + portServer + "/" + thingName %}
{% set thingD = td | replace("'", '\\"') | replace(' ', '') %}
{% set req = [] %}

#include <ESP8266WebServer.h>
#include <WebSocketsServer.h>
#include <ArduinoJson.h>

{{ defineVariable('const char*', 'ssid', ssid) }}
{{ defineVariable('const char*', 'password', password) }}
{{ defineVariable('String', 'protocolServer', protocolServer) }}
{{ defineVariable('int', 'portServer', portServer) }}
{{ defineVariable('String', 'urlServer', '') }}
{% if template['numevents'] != 0 %}
{{ defineVariable('String', 'protocolSocket', protocolSocket) }}
{{ defineVariable('int', 'portSocket', portSocket) }}
{{ defineVariable('String', 'urlSocket', '') }}
{% endif %}

{{ defineVariable('String', 'thingName', thingName) }}
{{ defineVariable('String', 'td', '') }}

DynamicJsonDocument doc(1024);
DynamicJsonDocument respDoc(1024);
DeserializationError err;
JsonObject obj;
JsonArray arr;

{{ defineVariable('int', 'properties_number', template['numproperties']) }}
{{ defineVariable('int', 'actions_number', template['numactions']) }}
{{ defineVariable('int', 'events_number', template['numevents']) }}

//properties
{% for property in template['properties'] %}
{{ defineVariable('const char*', 'property' + loop.index | string + '_name', property['name']) }}
{{ defineVariable(property['type'], 'property' + loop.index | string + '_value', 'iv') }}
{% endfor %}

//actions
{% for action in template['actions'] %}
{%- set actionIndex = 'action' + loop.index | string -%}
{{ defineVariable('const char*', actionIndex + '_name', action['name']) }}
{{ defineVariable('int', actionIndex + '_inputsNumber', action['input'] | length) }}
{% endfor %}

//events
{% for event in template['events'] %}
{{ defineVariable('const char*', 'event' + loop.index | string + '_name', event['name']) }}
{% endfor %}
String events_list[{{ template['numevents'] }}] = {
    {%- for i in range(1, template['numevents']+1) -%}
    {%- if i == template['numevents'] -%}
    {{ 'event' + i | string + '_name' }}
    {%- else -%}
    {{ 'event' + i | string + '_name' }},
    {%- endif -%}
    {%- endfor -%}
};

//requests
{{ defineVariable('String', 'req1', '/') }}
{% do req.append(('req1', 'HTTP_GET')) %}
{{ defineVariable('String', 'req2', ['"/"', '+', 'thingName']) }}
{% do req.append(('req2', 'HTTP_GET')) %}
{{ defineVariable('String', 'req3', ['"/"', '+', 'thingName', '+', '"/all/properties"' ]) }}
{% do req.append(('req3', 'HTTP_GET')) %}
{% for i in range(1, template['numproperties']+1) %}
{% set request = 'req' + (i + 3) | string %}
{{ defineVariable('String', request, ['"/"', '+', 'thingName', '+', '"/properties/"', '+', 'property' + i | string + '_name']) }}
{% do req.append((request, 'HTTP_GET')) %}
{% endfor %}
{% for i in range(1, template['numactions']+1) %}
{% set request = 'req' + (i + 3 + template['numproperties']) | string %}
{{ defineVariable('String', request, ['"/"', '+', 'thingName', '+', '"/actions/"', '+', 'action' + i | string + '_name']) }}
{% do req.append((request, 'HTTP_POST')) %}
{% endfor %}

ESP8266WebServer server(portServer);
{% if template['numevents'] != 0 %}
WebSocketsServer webSocket = WebSocketsServer(portSocket);
{% endif %}

IPAddress ipS;

String header;
String resp;

int i, j;

void setup() {
    Serial.begin(115200);
    Serial.println();
  
    connection(ssid, password);
    
    td = "{{ thingD }}";

    // server requests
    {% for r in req %}
    server.on({{ r[0] }},{{ r[1] }},{{ 'handleReq' + loop.index | string }});
    {% endfor %}

    server.begin();
    
    {% if template['numevents'] != 0 %}
    webSocket.begin();
    webSocket.onEvent(webSocketEvent);
    {% endif %}

    Serial.println("Server started");
    Serial.println(urlServer);
}    

void loop() {
    // handle requests
    {% if template['numevents'] != 0 %}
    webSocket.loop();
    {% endif %}
    server.handleClient();
}

void connection(const char* ssid, const char* password) {
    WiFi.begin(ssid, password);
    
    Serial.print("\nConnecting to ");
    Serial.print(ssid);

    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.print(".");
 
    }

    Serial.println("\nConnected");
    Serial.print("IP address: ");
    ipS = WiFi.localIP();
    Serial.println(ipS);

    urlServer = protocolServer + "://" + ipS.toString() + ":" + portServer + "/" + thingName;
    urlSocket = protocolSocket + "://" + ipS.toString() + ":" + portSocket + "/" + thingName;
}

// action functions
{% for action in template['actions'] %}
{{ defineFunction(action['name'], action['input'], action['output'], action['body']) }}

{% endfor %}

// request functions
void handleReq1() {
    Serial.println("\nGET thing url");
    {{ setVariable(True, 'resp', '[\\"" + urlServer + "\\"]') }}
    server.send(200, "application/ld+json", resp);
}

void handleReq2() {
    Serial.println("\nGET Thing Description"); 
    server.send(200, "application/ld+json", td);
}

void handleReq3() {
    Serial.print("\nGET all properties");
    JsonObject obj = doc.createNestedObject();
    {% for i in range(1, template['numproperties']+1) %}
    {{ setVariable(False, 'obj[property' + i | string + '_name]', 'property' + i | string + '_value') }}
    {% endfor %}
    {{ setVariable(False, 'serializeJson(resp, obj)') }}
    server.send(200, "application/ld+json", resp);
}

{# HandleReq for Properties #}
{% for i in range(1, template['numproperties']+1) %}
void handleReq{{ i+3 }}() {
    Serial.printf("\nGET %s value", property{{ i }}_name);
    {{ setVariable(True, 'resp', '{\\"" + (String) property' + i | string + '_name + "\\":" + property' + i | string + '_value + "}') }}
    server.send(200, "application/ld+json", resp);
}

{% endfor -%}

{# HandleReq for Actions #}
{% for action in template['actions'] %}
{%- set a = loop.index -%}
void handleReq{{ loop.index+3+template['numproperties'] }}() {
    Serial.printf("\nPOST invokeaction %s", action{{ loop.index }}_name);
    String body = server.arg("plain");
    Serial.printf("Body received: %s", body.c_str());

    {{ setVariable(False, 'err', 'deserializeJson(respDoc, body)') }}
    if(err) {
        Serial.printf("deserializeJson() failed with code %s", err.c_str());
        server.send(400, "text/plain", err.c_str());
    }
    else {
        {% if action['input'] | length > 0 %}
        if(
        {%- for item in action['input'] -%}
        respDoc["{{ item['name'] }}"].isNull() 
        {%- if not(loop.last) -%}
        {{ ' || ' }}
        {%- endif -%}
        {%- endfor -%}
        ) {
            {{ setVariable(True, 'resp', 'InvalidInput') }}
            server.send(400, "text/plain", resp);
        }
        else {
            {{ defineVariable('bool', 'validInput', 'true') }}

            {% for item in action['input'] %}
            {{ defineVariable(item['type'], 'action' + a | string + '_input' + loop.index | string + '_value', '') }}
            {% endfor %}

            {{ defineVariable('String', 'tmp', '') }}
            {{ setVariable(False, 'i', 0) }}
            while(validInput && i<{{ 'action' + a | string + '_inputsNumber'}}) {
                switch(i) {
                    {% for item in action['input'] %}
                    case({{ loop.index }}): {
                        {% if item['type'] == 'integer' or item['type'] == 'number' %}
                        serializeJson(respDoc["{{ item['name'] }}"], tmp);
                        for(i=0; i<tmp.length(); i++) {
                            if(!isDigit(tmp[i])) {
                                {{ setVariable(False, 'validInput', 'false') }}
                                break;
                            } 
                        }   
                        {% elif item['type'] == 'boolean' %}
                        {{ setVariable(False, 'serializeJson(respDoc["' + item['name'] + '"], tmp') }}
                        if(!tmp.equalsIgnoreCase("true") && !tmp.equalsIgnoreCase("false")) {
                            {{ setVariable(False, 'validInput', 'false') }}
                        } 
                        {% elif item['type'] == 'string' %}
                        {{ setVariable(False, 'serializeJson(respDoc["' + item['name'] + '"], tmp') }}
                        if(tmp.equalsIgnoreCase("null")) {
                            {{ setVariable(False, 'validInput', 'false') }}
                        }
                        {% endif %}
                        {%- if item['type'] == 'integer' %}
                        {{ setVariable(False, 'action' + a | string + '_input' + loop.index | string + '_value', 'tmp.toInt()') }}
                        {% elif item['type'] == 'number' %}
                        {{ setVariable(False, 'action' + a | string + '_input' + loop.index | string + '_value', 'tmp.toDouble()') }}
                        {% elif item['type'] == 'boolean' %}
                        else if(tmp.equals("true")) {
                            {{ setVariable(False, 'action' + a | string + '_input' + loop.index | string + '_value', 'true') }}
                        }
                        else { 
                            {{ setVariable(False, 'action' + a | string + '_input' + loop.index | string + '_value', 'false') }}
                        }
                        {% elif item['type'] == 'string' %}
                        else { 
                            {{ setVariable(False, 'action' + a | string + '_input' + loop.index | string + '_value', 'tmp') }}
                        }
                        {% elif item['type'] == 'null' %}
                        {{ setVariable(False, 'serializeJson(respDoc["' + item['name'] + '"], action' + a | string +'_input' + loop.index | string +'_value)') }}
                        {% endif %}
                        break;
                    }
                    {% endfor %}
                }
            }
            
            if(validInput) {
                {% if 'type' in action['output'] %}
                {{ castType(action['output']['type']) }} output = {{ action['name'] }}(
                {%- for item in action['input'] -%}
                {%- if loop.last -%}
                action{{ a }}_input{{ loop.index }}_value
                {%- else -%}
                action{{ a }}_input{{ loop.index }}_value,
                {%- endif -%}
                {%- endfor -%}
                );   
                {%- else %}
                {{ action['name'] }}(
                    {%- for item in action['input'] -%}
                    {%- if loop.last -%}
                    action{{ a }}_input{{ loop.index }}_value
                    {%- else -%}
                    action{{ a }}_input{{ loop.index }}_value,
                    {%- endif -%}
                    {%- endfor -%}
                ); 
                {% endif %}
                {% if 'type' in action['output'] %}    
                server.send(200, "text/plain", output);
                {% else %}
                {{ setVariable(False, 'resp', 'action' + a | string + '_name + " invoked"') }}
                server.send(200, "text/plain", resp);
                {% endif %}
            }
            else {
                {{ setVariable(True, 'resp', 'InvalidInput') }}
                server.send(400, "text/plain", resp);
            }
        }
        {% else %}
        {% if 'type' in action['output'] %}
            {{ castType(action['output']['type']) }} output = {{ action['name'] }}();
        {%- else %}
        {{ action['name'] }}(); 
        {% endif %}
        {% if 'type' in action['output'] %}    
        server.send(200, "text/plain", output);
        {% else %}
        {{ setVariable(False, 'resp', 'action' + a | string + '_name + " invoked"') }}
        server.send(200, "text/plain", resp);
        {% endif %}
        {% endif %}  
    }
}

{% endfor %}