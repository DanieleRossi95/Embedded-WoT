{% macro updateEndPoints() -%}
{#- EndPoint Thing #}
{%- for item in td['forms'] if 'href' in item %}
    {%- do item.update(href='" + urlServer + "/all/properties') -%}
{%- endfor %}    
{#- EndPoint Properties #}
{%- for property in template['properties'] %}
    {%- set i = loop.index -%}
    {%- for item in td['properties'][property['name']]['forms'] if 'href' in item -%}
        {%- do item.update(href='" + urlServer + "/properties/" + property' + i | string + '_name + "' ) -%}
    {%- endfor -%}
{%- endfor %}
{#- EndPoint Actions  #}    
{%- for action in template['actions'] %}
    {%- set i = loop.index -%}
    {%- for item in td['actions'][action['name']]['forms'] if 'href' in item -%}
        {%- do item.update(href='" + urlServer + "/actions/" + action' + i | string + '_name + "' ) -%}
    {%- endfor -%}
{%- endfor %}     
{#- EndPoint Events  #}    
{%- for event in template['events'] %}
    {%- set i = loop.index -%}
    {%- for item in td['events'][event['name']]['forms'] if 'href' in item -%}
        {%- do item.update(href='" + urlSocket + "/events/" + event' + i | string + '_name + "' ) -%}
    {%- endfor -%}
{%- endfor %}   
{%- endmacro %}

{% macro defineVariable(typeV, name, value) -%}
{%- if value is iterable and value is not string %}
{{ typeV }} {{ name }} = 
    {%- for elem in value -%}
        {%- if loop.last -%} 
            {{ ' ' + elem }};
        {%- else -%}
            {{ ' ' + elem }}
        {%- endif -%}
    {%- endfor -%}    
{%- elif typeV == 'const char*' %}
{%- if value == 'iv' -%}
{{ typeV }} {{ name }} = "";
{%- else -%}
{{ typeV }} {{ name }} = "{{ value }}";
{%- endif -%}
{%- elif typeV.lower() == 'string' or typeV == 'null' %}
{%- if value == 'iv' -%}
{{ castType(typeV) }} {{ name }} = "";
{%- else -%}
{{ castType(typeV) }} {{ name }} = "{{ value }}";
{%- endif -%}
{%- elif typeV == 'integer' %}
{%- if value == '' -%}
int {{ name }};
{%- elif value == 'iv' -%}
int {{ name }} = 0;    
{%- else -%}    
int {{ name }} = {{ value }};
{%- endif -%}
{%- elif typeV == 'number' %}
{%- if value == '' -%}
double {{ name }};
{%- elif value == 'iv' -%}
double {{ name }} = 0.0;
{%- elif '.' in value -%}    
double {{ name }} = {{ value }};
{%- else -%}
double {{ name }} = {{ value }}.0;
{%- endif -%}
{% elif typeV == 'boolean' %}
{%- if value == '' -%}
bool {{ name }};
{%- elif value == 'iv' -%}
bool {{ name }} = false;    
{%- else -%}    
bool {{ name }} = {{ value }};
{%- endif -%}
{% elif typeV == 'array' or typeV == 'JsonArray' %}
{%- if value == 'iv' -%}
JsonArray {{ name }} = doc.createNestedArray();
{%- else -%}
JsonArray {{ name }} = {{ value }};
{%- endif -%}
{% elif typeV == 'object' or typeV == 'JsonObject' %}
{%- if value == 'iv' -%}
JsonObject {{ name }} = doc.createNestedObject();
{%- else -%}
JsonObject {{ name }} = {{ value }};
{%- endif -%}
{% else %}
{{ typeV }} {{ name }} = {{ value }};    
{%- endif %}    
{%- endmacro %}

{% macro setVariable(ifString, name, value='') -%}
{%- if ifString -%}
{{ name }} = "{{ value }}";
{%- elif value == '' -%}
{{ name }};
{%- else -%}
{{ name }} = {{ value }};
{%- endif -%}
{%- endmacro %}

{% macro defineFunction(name, input, output, body) -%}
{%- if 'type' in output -%}
{{ castType(output['type']) }}
{%- else -%}      
void       
{%- endif -%}        
{{ ' ' + name }}(
    {%- for item in input -%}
        {{ castType(item['type']) }}
        {%- if loop.last -%}      
        {{ ' ' + item['name'] }}
        {%- else -%} 
        {{ ' ' + item['name'] }},
        {%- endif -%}
    {%- endfor -%}
) {
    {{ body }}
    {% if 'name' in output %}
    return {{ output['name'] }};
    {% endif %}
}    
{%- endmacro %}

{% macro castType(type) -%}
{%- if type == 'integer' -%}
int
{%- elif type == 'number' -%}
double
{%- elif type.lower() == 'string' or type == 'null' -%}
String
{%- elif type == 'boolean' -%}
bool
{%- elif type == 'array' -%}
JsonArray
{%- elif type == 'object' -%}
JsonObject 
{%- endif -%}
{%- endmacro %}

{% macro handleType(interaction, interactionName, array=False) -%}
{% if interaction['type'] == 'array' %}
{{ defineVariable('JsonArray', interactionName + '_value', 'doc.createNestedArray()') }}
{% if 'minItems' in property %}
{{ defineVariable('int', interactionName + '_minItems', interaction['minItems']) }}
{% endif %}
{% if 'maxItems' in interaction %}
{{ defineVariable('int', interactionName + '_minItems', interaction['maxItems']) }}
{% endif %}
{{ handleType(interaction['items'], interactionName, True) }}
{% elif interaction['type'] == 'object' %}
{{ defineVariable('JsonObject', interactionName + '_value', 'doc.createNestedObject()') }}
{% if 'properties' in interaction %}
{{ defineVariable('String', interactionName + '_schema', interaction['properties'] | replace("'", '\\"') | replace(' ', '')) }}
{% endif %}
{% if 'required' in interaction %}
String {{ interactionName }}_opRequired[{{ interaction['required'] | length }}] = {
    {%- for p in interaction['required'] -%}
    {%- if loop.last -%}
    "{{ p }}"
    {%- else -%}
    "{{ p }}",
    {%- endif -%}
    {%- endfor -%}
};
{%- endif -%}
{% elif interaction['type'] == 'integer' or interaction['type'] == 'number' %}
{% if array %}
{% if 'minimum' in interaction %}
{{ defineVariable(interaction['type'], interactionName + '_itemsMinimum', interaction['minimum']) }}
{% endif %}
{% if 'maximum' in property %}
{{ defineVariable(interaction['type'], interactionName + '_itemsMaximum', interaction['maximum']) }}
{% endif %}
{% else %}
{% if 'minimum' in interaction %}
{{ defineVariable(interaction['type'], interactionName + '_minimum', interaction['minimum']) }}
{% endif %}
{% if 'maximum' in property %}
{{ defineVariable(interaction['type'], interactionName + '_maximum', interaction['maximum']) }}
{% endif %}
{% endif %}
{% else %}
{{ defineVariable(interaction['type'], interactionName + '_value', 'iv') }}
{%- endif -%}
{%- endmacro -%}

{{ updateEndPoints() }}

{% set ssid = template['ssid'] %}
{% set password = template['password'] %}
{% set protocolServer = 'http' %}
{% set protocolSocket = 'ws' %}
{% set portServer = template['portserver'] %}
{% set portSocket = template['portsocket'] %}
{% set ipServer = '192.168.1.5' %}
{% set thingName = td['title'].lower() %}
{% set urlServer = protocolServer + "://" + ipServer + ":" + portServer + "/" + thingName %}
{% set thingD = td | replace("'", '\\"') | replace(' ', '') %}
{% set req = [] %}

#include <ESP8266WebServer.h>
#include <WebSocketsServer.h>
#include <ArduinoJson.h>

{{ defineVariable('const char*', 'ssid', ssid) }}
{{ defineVariable('const char*', 'password', password) }}
{{ defineVariable('String', 'protocolServer', protocolServer) }}
{{ defineVariable('int', 'portServer', portServer) }}
{{ defineVariable('String', 'urlServer', '') }}
{% if template['numevents'] != 0 %}
{{ defineVariable('String', 'protocolSocket', protocolSocket) }}
{{ defineVariable('int', 'portSocket', portSocket) }}
{{ defineVariable('String', 'urlSocket', '') }}
{% endif %}

{{ defineVariable('String', 'thingName', thingName) }}
{{ defineVariable('String', 'td', '') }}

DynamicJsonDocument doc(1024);
DynamicJsonDocument respDoc(1024);
DeserializationError err;
JsonObject obj;
JsonArray arr;

{{ defineVariable('int', 'properties_number', template['numproperties']) }}
{{ defineVariable('int', 'actions_number', template['numactions']) }}
{{ defineVariable('int', 'events_number', template['numevents']) }}

{% if template['numproperties'] > 0 %}
// properties
{% for property in template['properties'] %}
{{ defineVariable('const char*', 'property' + loop.index | string + '_name', property['name']) }}
{{ handleType(property, 'property' + loop.index | string) }}
{% endfor %}
{% endif %}

{% if template['numactions'] > 0 %}
//actions
{% for action in template['actions'] %}
{% set actionIndex = 'action' + loop.index | string -%}
{{ defineVariable('const char*', actionIndex + '_name', action['name']) }}
{{ defineVariable('int', actionIndex + '_inputsNumber', action['input'] | length) }}
String {{ actionIndex + '_schema' }}[{{ action['input'] | length }}] = {
    {%- for item in action['input'] -%}
    {%- if loop.last -%}
    "{{ item | replace("'", '\\"') | replace(' ', '') }}"
    {%- else -%}
    "{{ item | replace("'", '\\"') | replace(' ', '') }}",
    {%- endif -%}
    {%- endfor -%}
};
{% if 'name' in action['output']  %}
{{ defineVariable('String', actionIndex + '_output', action['output'] | string ) }}
{% endif %}
{% endfor %}
{% endif %}

{% if template['numevents'] > 0 %}
//events
{% for event in template['events'] %}
{{ defineVariable('const char*', 'event' + loop.index | string + '_name', event['name']) }}
{% endfor %}
String events_list[{{ template['numevents'] }}] = {
    {%- for i in range(1, template['numevents']+1) -%}
    {%- if i == template['numevents'] -%}
    {{ 'event' + i | string + '_name' }}
    {%- else -%}
    {{ 'event' + i | string + '_name' }},
    {%- endif -%}
    {%- endfor -%}
};
{% endif %}

//requests
{{ defineVariable('String', 'req1', '/') }}
{% do req.append(('req1', 'HTTP_GET')) %}
{{ defineVariable('String', 'req2', ['"/"', '+', 'thingName']) }}
{% do req.append(('req2', 'HTTP_GET')) %}
{{ defineVariable('String', 'req3', ['"/"', '+', 'thingName', '+', '"/all/properties"' ]) }}
{% do req.append(('req3', 'HTTP_GET')) %}
{% for i in range(1, template['numproperties']+1) %}
{% set request = 'req' + (i + 3) | string %}
{{ defineVariable('String', request, ['"/"', '+', 'thingName', '+', '"/properties/"', '+', 'property' + i | string + '_name']) }}
{% do req.append((request, 'HTTP_GET')) %}
{% endfor %}
{% for i in range(1, template['numactions']+1) %}
{% set request = 'req' + (i + 3 + template['numproperties']) | string %}
{{ defineVariable('String', request, ['"/"', '+', 'thingName', '+', '"/actions/"', '+', 'action' + i | string + '_name']) }}
{% do req.append((request, 'HTTP_POST')) %}
{% endfor %}

ESP8266WebServer server(portServer);
{% if template['numevents'] != 0 %}
WebSocketsServer webSocket = WebSocketsServer(portSocket);
{% endif %}

IPAddress ipS;

String header;
String resp;

int i, j;

void setup() {
    // properties data 
    {% for property in template['properties'] %}
    {% if property['type'] == 'object' %}
    {{ setVariable(False, 'serializeJson(property' + loop.index | string + '_op, arr)') }}
    {% if 'properties' in property %}
    for(i=0; i<arr.size(); i++) {
        {{ setVariable(True, 'property' + loop.index | string + '_value[(char*) arr[i]["name"]]', '') }}
    }
    {% endif %}
    {% endif %}
    {% endfor %}

    Serial.begin(115200);
    Serial.println();
  
    connection(ssid, password);
    
    td = "{{ thingD }}";

    // server requests
    {% for r in req %}
    server.on({{ r[0] }},{{ r[1] }},{{ 'handleReq' + loop.index | string }});
    {% endfor %}

    server.begin();
    
    {%- if template['numevents'] != 0 -%}
    webSocket.begin();
    webSocket.onEvent(webSocketEvent);
    {% endif %}

    Serial.println("Server started");
    Serial.println(urlServer);
}    

void loop() {
    // handle requests
    {% if template['numevents'] != 0 %}
    webSocket.loop();
    {% endif %}
    server.handleClient();
}

void connection(const char* ssid, const char* password) {
    WiFi.begin(ssid, password);
    
    Serial.print("\nConnecting to ");
    Serial.print(ssid);

    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.print(".");
    }

    Serial.println("\nConnected");
    Serial.print("IP address: ");
    ipS = WiFi.localIP();
    Serial.println(ipS);

    urlServer = protocolServer + "://" + ipS.toString() + ":" + portServer + "/" + thingName;
    {% if template['numevents'] != 0 %}
    urlSocket = protocolSocket + "://" + ipS.toString() + ":" + portSocket + "/" + thingName;
    {% endif %}
}

{% if template['numactions'] > 0 %}
// action functions
{% for action in template['actions'] %}
{{ defineFunction(action['name'], action['input'], action['output'], action['body']) }}
{% endfor %}

// handle action input types
bool handleInputType(String value, String schema, bool array) {
    {{ defineVariable('bool', 'validInput', 'true') }}
    {{ defineVariable('JsonObject', 'obj_schema', 'doc.createNestedObject()') }}
    {{ setVariable(False, 'deserializeJson(obj_schema, schema)') }}
    {% set isString = False %}
    {% set isBoolean = False %}
    {% set isInteger = False %}
    {% set isNumber = False %}
    {% set isMin = False %}
    {% set isMax = False %}
    {% set isArray = False %}
    {% set isMinItems = False %}
    {% set isMaxItems = False %}
    {% set isArrayObject = False %}
    {% set isArrayString = False %}
    {% set isArrayBoolean = False %}
    {% set isArrayInteger = False %}
    {% set isArrayMin = False %}
    {% set isArrayMax = False %}
    {% set isObject = False %}
    {% set isProperty = False %}
    {% set isPropertyString = False %}
    {% set isPropertyBoolean = False %}
    {% set isPropertyInteger = False %}
    {% set isPropertyMin = False %}
    {% set isPropertyMax = False %}
    {% set isRequired = False %}
    {% for action in template['actions'] %}
    {% for item in action['input'] %}
    {% if item['type'] == 'string' and not(isString) %}
    {% set isString = True %}
    {% elif item['type'] == 'boolean' and not(isBoolean) %}
    {% set isBoolean = True %}
    {% elif item['type'] == 'integer' or item['type'] == 'number' %}
    {% if not(isInteger) %}
    {% set isInteger = True %}
    {% endif %}
    {% if 'minimum' in item and not(isMin) %}
    {% set isMin = True %}
    {% endif %}
    {% if 'maximum' in item and not(isMax) %}
    {% set isMax = True %}
    {% endif %}
    {% elif item['type'] == 'array' %}
    {% if not(isArray) %}
    {% set isArray = True %}
    {{ defineVariable('JsonArray', 'array_value', 'doc.createNestedArray()') }}
    {% endif %}
    {% if 'minItems' in item and not(isMinItems) %}
    {% set isMinItems = True %}
    {% endif %}
    {% if 'maxItems' in item and not(isMaxItems) %}
    {% set isMaxItems = True %}
    {% endif %}
    {% if item['items']['type'] == 'object' and not(isArrayObject) %}
    {% set isArrayObject = True %}
    {% elif item['items']['type'] == 'string' and not(isArrayString) %}
    {% set isArrayString = True %}
    {% elif item['items']['type'] == 'booelan' and not(isArrayBoolean) %}
    {% set isArrayBoolean = True %}
    {% elif item['items']['type'] == 'integer' or item['items']['type'] == 'number' %}
    {% if not(isArrayInteger) %}
    {% set isArrayInteger = True %}
    {% endif %}
    {% if 'minimum' in item['items'] and not(isMin) %}
    {% set isArrayMin = True %}
    {% endif %}
    {% if 'maximum' in item['items'] and not(isMax) %}
    {% set isArrayMax = True %}
    {% endif %}
    {% endif %}
    {% elif item['type'] == 'object' %}
    {% if not(isObject) %}
    {% set isObject = True %}
    {{ defineVariable('JsonObject', 'obj_value', 'doc.createNestedObject()') }}
    {% endif %}
    {% if 'properties' in item %}
    {% set isProperty = True %}
    {% for property in item['properties'] %}
    {% if property['type'] == 'string' and not(isPropertyString) %}
    {% set isPropertyString = True %}
    {% elif property['type'] == 'boolean' and not(isPropertyBoolean) %}
    {% set isPropertyBoolean = True %}
    {% elif property['type'] == 'integer' or property['type'] == 'number' %}
    {% if not(isPropertyInteger) %}
    {% set isPropertyInteger = True %}
    {% endif %}
    {% if 'minimum' in property and not(isPropertyMin) %}
    {% set isPropertyMin = True %}
    {% endif %}
    {% if 'maximum' in property and not(isPropertyMax) %}
    {% set isPropertyMax = True %}
    {% endif %}
    {% endif %}
    {% if 'required' in item and not(isRequired) %}
    {% set isRequired = True%}
    {% endif %}
    {% endfor %}
    {% endif %}
    {% endif %}
    {% endfor %}
    {% endfor %}
    {{ isArray }}
    {{ isObject }}
    {% if isString %}
    if(obj_schema["type"].equals("string")) {
        {% if isArrayString %}
        if(array) {
            {{ setVariable(False, 'deserializeJson(array_value, value)') }}
            for(i=0; i<array_value.size(); i++) 
                if(array_value[i].equalsIgnoreCase("null")) {
                    {{ setVariable(False, 'validInput', 'false') }}
                    break;
                }
        }
        else if(value.equalsIgnoreCase("null")) 
            {{ setVariable(False, 'validInput', 'false') }}
        {% else %}
        if(value.equalsIgnoreCase("null")) 
            {{ setVariable(False, 'validInput', 'false') }}
        {% endif %}    
    }
    {% endif %}
    {% if isBoolean %}
    else if(obj_schema["type"].equals("boolean")) {
        {% if isArrayBoolean %}
        if(array) {
            {{ setVariable(False, 'deserializeJson(array_value, value)') }}
            for(i=0; i<array_value.size(); i++) 
                if(!array_value[i].equalsIgnoreCase("true") and !array_value[i].equalsIgnoreCase("false")) {
                    {{ setVariable(False, 'validInput', 'false') }}
                    break;
                }
        }
        else if(!value.equalsIgnoreCase("true") and !value.equalsIgnoreCase("false"))
            {{ setVariable(False, 'validInput', 'false') }}
        {% else %}   
        if(!value.equalsIgnoreCase("true") and !value.equalsIgnoreCase("false"))
            {{ setVariable(False, 'validInput', 'false') }}
        {% endif %} 
    }
    {% endif %}
    {% if isInteger %}
    else if(obj_schema["type"].equals("integer")) {
        {% if isArrayInteger %}
        if(array) {
            {{ setVariable(False, 'deserializeJson(array_value, value)') }}
            for(i=0; i<array_value.size(); i++) {
                for(j=0; i<array_value[i].length(); j++) 
                    if(!isDigit(array_value[i][j])) {
                        {{ setVariable(False, 'validInput', 'false') }}
                        break;
                    }
                if(!validInput)   
                    break; 
            }
            {% if isArrayMin or isArrayMax %}
            if(validInput) {
                {{ defineVariable('int', 'input[array_value.size()]', '{}') }}
                for(i=0; i<array_value.size(); i++) 
                    {{ setVariable(False, 'input[i]', 'array_value[i].toInt()') }}
                {% if isArrayMin %}
                if(!obj_schema["minimum"].isNull()) 
                    for(i=0; i<array_value.size(); i++)
                        if(input[i] < obj_schema["minimum"]) {
                            {{ setVariable(False, 'validInput', 'false') }}
                            break;
                        }
                {% endif %}
                {% if isArrayMax %}        
                if(!obj_schema["maximum"].isNull())  
                    for(i=0; i<array_value.size(); i++)
                        if(input[i] > obj_schema["maximum"]) {
                            {{ setVariable(False, 'validInput', 'false') }}
                            break;
                        }   
                {% endif %}          
            }
            {% endif %}       
        }
        else {
            for(i=0; i<value.length(); i++) 
                if(!isDigit(value[i])) {
                    {{ setVariable(False, 'validInput', 'false') }}
                    break;
                }
            {% if isMin or isMax %}
            if(validInput) {
                {{ defineVariable('int', 'input', 'value.toInt()') }}
                {% if isMin %}
                if(!obj_schema["minimum"].isNull()) 
                    if(input < obj_schema["minimum"])
                        {{ setVariable(False, 'validInput', 'false') }}
                {% endif %}
                {% if isMax %}        
                if(!obj_schema["maximum"].isNull())  
                    if(input > obj_schema["maximum"])
                        {{ setVariable(False, 'validInput', 'false') }}     
                {% endif %}          
            }
            {% endif %}
        }
        {% else %}
        for(i=0; i<value.length(); i++) 
            if(!isDigit(value[i])) {
                {{ setVariable(False, 'validInput', 'false') }}
                break;
            }
        {% if isMin or isMax %}
        if(validInput) {
            {{ defineVariable('int', 'input', 'value.toInt()') }}
            {% if isMin %}
            if(!obj_schema["minimum"].isNull()) 
                if(input < obj_schema["minimum"])
                    {{ setVariable(False, 'validInput', 'false') }}
            {% endif %}
            {% if isMax %}        
            if(!obj_schema["maximum"].isNull())  
                if(input > obj_schema["maximum"])
                    {{ setVariable(False, 'validInput', 'false') }}     
            {% endif %}          
        }
        {% endif %}
        {% endif %}
    }
    {% endif %}
    {% if isArray %}
    else if(obj_schema["type"].equals("array")) {
        {{ setVariable(False, 'deserializeJson(array_value, value)') }}
        if(array_value.isNull()) 
            {{ setVariable(False, 'validInput', 'false') }}
        else {
            {% if isMinItems %}
            if(!obj.schema["minItems"].isNull())
                if(array_value.size() < obj.schema["minItems"])    
                    {{ setVariable(False, 'validInput', 'false') }}
            {% endif %}
            {% if isMaxItems %}
            if(!obj.schema["maxItems"].isNull())
                if(array_value.size() > obj.schema["maxItems"])    
                    {{ setVariable(False, 'validInput', 'false') }}
            {% endif %}
            {% if isMinItems or isMaxItems %}
            if(validInput) {
                {{ setVariable(False, 'serializeJson(obj_schema["items"], schema)') }}
                {{ setVariable(False, 'handleInputType(value, schema, true)') }}
            }
            {% else %}
            {{ setVariable(False, 'serializeJson(obj_schema["items"], schema)') }}
            {{ setVariable(False, 'handleInputType(value, schema, true)') }}
            {% endif %}
        }
    }
    {% endif %}
    {% if isObject %}
    else if (obj_schema["type"].equals("object")) {
        {% if isArrayObject %}
        if(array) {
            {{ setVariable(False, 'deserializeJson(array_value, value)') }}
            for(i=0; i<array_value.size(); i++) {
                {% if isRequired %}
                for(j=0; i<obj_schema["required"].size(); j++)
                    if(array_value[i][(String) obj_schema["required"][j]].isNull()) {
                        {{ setVariable(False, 'validInput', 'false') }}
                        break;
                    }
                if(validInput) {
                    for(i=0; i<obj_schema["properties"].size(); i++)
                        if(!array_value[i][(String) obj_schema["properties"][j]].isNull()) {
                            {{ setVariable(False, 'serializeJson(obj_schema["properties"][j], schema)') }}
                            {{ setVariable(False, 'serializeJson(array_value[i][(String) obj_schema["properties"][j]], value)') }}
                            {{ setVariable(False, 'handleInputType(value, schema, false)') }} 
                        }
                }
                else
                    break;    
                {% else %}
                for(j=0; i<obj_schema["properties"].size(); i++) 
                    if(!array_value[i][(String) obj_schema["properties"][j]].isNull()) {
                        {{ setVariable(False, 'serializeJson(obj_schema["properties"][j], schema)') }}
                        {{ setVariable(False, 'serializeJson(array_value[i][(String) obj_schema["properties"][j]], value)') }}
                        {{ setVariable(False, 'handleInputType(value, schema, false)') }} 
                    }
                {% endif %}
            }
        }
        else {
            {{ setVariable(False, 'deserializeJson(obj_value, value)') }}
            if(obj_value.isNull())
                {{ setVariable(False, 'validInput', 'false') }}
            else {
                {% if isRequired %}
                for(i=0; i<obj_schema["required"].size(); i++)
                    if(obj_value[(String) obj_schema["required"][i]].isNull()) {
                        {{ setVariable(False, 'validInput', 'false') }}
                        break;
                    }
                if(validInput) {
                    for(i=0; i<obj_schema["properties"].size(); i++)
                        if(!obj_value[(String) obj_schema["properties"][i]].isNull()) {
                            {{ setVariable(False, 'serializeJson(obj_schema["properties"][i], schema)') }}
                            {{ setVariable(False, 'serializeJson(obj_value[(String) obj_schema["properties"][i]], value)') }}
                            {{ setVariable(False, 'handleInputType(value, schema, false)') }} 
                        }
                }
                {% else %}
                for(i=0; i<obj_schema["properties"].size(); i++) 
                    if(!obj_value[(String) obj_schema["properties"][i]].isNull()) {
                        {{ setVariable(False, 'serializeJson(obj_schema["properties"][i], schema)') }}
                        {{ setVariable(False, 'serializeJson(obj_value[(String) obj_schema["properties"][i]], value)') }}
                        {{ setVariable(False, 'handleInputType(value, schema, false)') }} 
                    }
                {% endif %}
            }
        }
        {% else %}
        {{ setVariable(False, 'deserializeJson(obj_value, value)') }}
        if(obj_value.isNull())
            {{ setVariable(False, 'validInput', 'false') }}
        else {
            {% if isRequired %}
            for(i=0; i<obj_schema["required"].size(); i++)
                if(obj_value[(String) obj_schema["required"][i]].isNull()) {
                    {{ setVariable(False, 'validInput', 'false') }}
                    break;
                }
            if(validInput) {
                for(i=0; i<obj_schema["properties"].size(); i++)
                    if(!obj_value[(String) obj_schema["properties"][i]].isNull()) {
                        {{ setVariable(False, 'serializeJson(obj_schema["properties"][i], schema)') }}
                        {{ setVariable(False, 'serializeJson(obj_value[(String) obj_schema["properties"][i]], value)') }}
                        {{ setVariable(False, 'handleInputType(value, schema, false)') }} 
                    }
            }
            {% else %}
            for(i=0; i<obj_schema["properties"].size(); i++) 
                if(!obj_value[(String) obj_schema["properties"][i]].isNull()) {
                    {{ setVariable(False, 'serializeJson(obj_schema["properties"][i], schema)') }}
                    {{ setVariable(False, 'serializeJson(obj_value[(String) obj_schema["properties"][i]], value)') }}
                    {{ setVariable(False, 'handleInputType(value, schema, false)') }} 
                }
            {% endif %}
        }
        {% endif %}    
    }
    {% endif %}
    {{ setVariable(False, 'return validInput') }}
}
{% endif %}

// request functions
void handleReq1() {
    Serial.println("\nGET thing url");
    {{ setVariable(True, 'resp', '[\\"" + urlServer + "\\"]') }}
    server.send(200, "application/ld+json", resp);
}

void handleReq2() {
    Serial.println("\nGET Thing Description"); 
    server.send(200, "application/ld+json", td);
}

void handleReq3() {
    Serial.print("\nGET all properties");
    JsonObject obj = doc.createNestedObject();
    {% for i in range(1, template['numproperties']+1) %}
    {{ setVariable(False, 'obj[property' + i | string + '_name]', 'property' + i | string + '_value') }}
    {% endfor %}
    {{ setVariable(False, 'serializeJson(resp, obj)') }}
    server.send(200, "application/ld+json", resp);
}

{# HandleReq for Properties #}
{% for i in range(1, template['numproperties']+1) %}
void handleReq{{ i+3 }}() {
    Serial.printf("\nGET %s value", property{{ i }}_name);
    {{ setVariable(True, 'resp', '{\\"" + (String) property' + i | string + '_name + "\\":" + property' + i | string + '_value + "}') }}
    server.send(200, "application/ld+json", resp);
}

{% endfor -%}

{# HandleReq for Actions #}
{% for action in template['actions'] %}
{%- set a = loop.index -%}
void handleReq{{ loop.index+3+template['numproperties'] }}() {
    Serial.printf("\nPOST invokeaction %s", action{{ loop.index }}_name);
    String body = server.arg("plain");
    Serial.printf("Body received: %s", body.c_str());

    {{ setVariable(False, 'err', 'deserializeJson(respDoc, body)') }}
    if(err) {
        Serial.printf("deserializeJson() failed with code %s", err.c_str());
        server.send(400, "text/plain", err.c_str());
    }
    else {
        {% if action['input'] | length > 0 %}
        if(
        {%- for item in action['input'] -%}
        respDoc["{{ item['name'] }}"].isNull() 
        {%- if not(loop.last) -%}
        {{ ' || ' }}
        {%- endif -%}
        {%- endfor -%}
        ) {
            {{ setVariable(True, 'resp', 'InvalidInput') }}
            server.send(400, "text/plain", resp);
        }
        else {
            {{ defineVariable('bool', 'validInput', 'true') }}

            {% for item in action['input'] %}
            {{ defineVariable(item['type'], 'action' + a | string + '_input' + loop.index | string + '_value', 'iv') }}
            {% endfor %}

            {{ defineVariable('String', 'tmp', '') }}
            {{ setVariable(False, 'i', 0) }}
            while(validInput and i<{{ 'action' + a | string + '_inputsNumber'}}) {
                switch(i) {
                    {% for item in action['input'] %}
                    case({{ loop.index0 }}) {
                        {{ setVariable(False, 'serializeJson(respDoc["' + item['name'] + '"], tmp)') }}
                        {{ setVariable(False, 'validInput', 'handleInputType(tmp,actions_schema[' + loop.index0 | string + '],false)') }}
                        break;
                    }
                    {% endfor %}
                }
                {{ setVariable(False, 'i++') }}
            }    

            if(validInput) {
                {% for item in action['input'] %}
                {% if item['type'] == 'integer' %}
                {{ setVariable(False, 'action' + a | string + '_input' + loop.index | string + '_value', 'tmp.toInt()') }}
                {% elif item['type'] == 'number' %}
                {{ setVariable(False, 'action' + a | string + '_input' + loop.index | string + '_value', 'tmp.toDouble()') }}
                {% elif item['type'] == 'boolean' %}
                if(tmp.equals("true")) {
                    {{ setVariable(False, 'action' + a | string + '_input' + loop.index | string + '_value', 'true') }}
                }
                else { 
                    {{ setVariable(False, 'action' + a | string + '_input' + loop.index | string + '_value', 'false') }}
                }
                {% elif item['type'] == 'string'%}
                {{ setVariable(False, 'action' + a | string + '_input' + loop.index | string + '_value', 'tmp') }}
                }
                {% elif item['type'] == 'null' %}
                {{ setVariable(False, 'serializeJson(respDoc["' + item['name'] + '"], action' + a | string +'_input' + loop.index | string +'_value)') }}
                {% elif item['type'] == 'array' %}
                {{ setVariable(False, 'deserializeJson(action' + a | string + '_input' + loop.index | string + '_value, arr)') }}
                {% elif item['type'] == 'object' %}
                {{ setVariable(False, 'deserializeJson(action' + a | string + '_input' + loop.index | string + '_value, obj)') }}
                {% endif %}
                {% endfor %}

                {% if 'type' in action['output'] %}
                {{ castType(action['output']['type']) }} output = {{ action['name'] }}(
                {%- for item in action['input'] -%}
                {%- if loop.last -%}
                action{{ a }}_input{{ loop.index }}_value
                {%- else -%}
                action{{ a }}_input{{ loop.index }}_value,
                {%- endif -%}
                {%- endfor -%}
                );   
                {%- else %}
                {{ action['name'] }}(
                    {%- for item in action['input'] -%}
                    {%- if loop.last -%}
                    action{{ a }}_input{{ loop.index }}_value
                    {%- else -%}
                    action{{ a }}_input{{ loop.index }}_value,
                    {%- endif -%}
                    {%- endfor -%}
                ); 
                {% endif %}
                {% if 'type' in action['output'] %}    
                {% if action['output']['type'] != 'string' or action['output']['type'] != 'null' %}
                server.send(200, "text/plain", (char*) output);
                {% else %}
                server.send(200, "text/plain", output);
                {% endif %}
                {% else %}
                server.send(200, "text/plain", "");
                {% endif %}
            }
            else {
                {{ setVariable(True, 'resp', 'InvalidInput') }}
                server.send(400, "text/plain", resp);
            }
        }
        {% else %}
        {% if 'type' in action['output'] %}
            {{ castType(action['output']['type']) }} output = {{ action['name'] }}();
        {%- else %}
        {{ action['name'] }}(); 
        {% endif %}
        {% if 'type' in action['output'] %}    
        {% if action['output']['type'] != 'string' or action['output']['type'] != 'null' %}
        server.send(200, "text/plain", (char*) output);
        {% else %}
        server.send(200, "text/plain", output);
        {% endif %}
        {% else %}
        server.send(200, "text/plain", "");
        {% endif %}
        {% endif %}  
    }
}

{% endfor %}